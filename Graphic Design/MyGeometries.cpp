//
//  MyGeometries.cpp - Fall 2022
//
//   Sets up and renders 
//     - the ground plane, and
//     - the surface of rotation
//   for the Math 155A project #6.
//


// Use the static library (so glew32.dll is not needed):
#define GLEW_STATIC
//#include <GL/glew.h> 
//#include <GLFW/glfw3.h>
#include "glew.h"
#include "glfw3.h"

#include "LinearR3.h"		// Adjust path as needed.
#include "LinearR4.h"		// Adjust path as needed.
#include "MathMisc.h"       // Adjust path as needed

#include "MyGeometries.h"
#include "TextureProj.h"
#include "PhongData.h"
#include "RgbImage.h"
#include "GlGeomCylinder.h"
#include "GlGeomSphere.h"
#include "GlGeomTorus.h"
#include "GlGeomCone.h"
#include "GlGeomBezier.h"
#include "GlGeomTeapot.h"
#include "TextureProj.h"


// **********************************
// Material to underlie a texture map.
// YOU MAY DEFINE A SECOND ONE OF THESE IF YOU WISH
// **********************************
phMaterial materialUnderTexture;

// **************************
// Information for loading textures
// **************************
const int NumTextures = 25;
unsigned int TextureNames[NumTextures];     // Texture names generated by OpenGL
const char* TextureFiles[NumTextures] = {
    "Wall3.bmp",             //0
    "Floor.bmp",            //1
    "Sofa.bmp",             //2
    "SpeakerF1.bmp",        //3
    "SofaLeg.bmp",          //4
    "SofaCushion2.bmp",     //5
    "SpeakerF2.bmp",        //6
    "channel1.bmp",         //7 Start of Channel
    "channel2.bmp",         //8
    "channel3.bmp",         //9
    "sambuss.bmp",          //10
    "channel5.bmp",         //11
    "cup.bmp",              //12
    "Cabinet.bmp",          //13
    "roomba.bmp",           //14
    "Wall2.bmp",            //15
    "Wall.bmp",            //16
    "marble.bmp",           //17
    "gold.bmp",             //18
    "CoffeeTable.bmp",       //19
    "wall4.bmp",
    "koi.bmp",
    "wall5.bmp",
    "cd1.bmp",
    "cd2.bmp"
};

// *******************************
// For spheres and a cylinder and a torus (Torus is currently not used.)
// *******************************
GlGeomSphere texSphere(4, 4);
GlGeomCylinder texCylinder(4, 4, 4);
GlGeomTorus texTorus(1, 1, 0.1);   
GlGeomCone texCone(4, 4, 4);
GlGeomTeapot texTeapot(10, 10);

// ************************
// General data helping with setting up VAO (Vertex Array Objects)
//    and Vertex Buffer Objects.
// ***********************
const int NumObjects = 7;
const int iFloor = 0;
const int iCircularSurf = 1;
const int iWall = 2;            // RESERVED FOR USE BY 155A PROJECT
const int iWallL = 3;
const int iWallR = 4;
const int iCube = 5;
const int iCubeTop = 6;

double maxTime = 1.0;             // Time cycles back to 0 after reaching maxTime.
double altTime = 0.0;             // Time cycles from 0 to 1 and 1 back to 0 without resetting
int trigger = 1;                  // Indicate to increment altTime or decrement altTime


unsigned int myVBO[NumObjects];  // a Vertex Buffer Object holds an array of data
unsigned int myVAO[NumObjects];  // a Vertex Array Object - holds info about an array of vertex data;
unsigned int myEBO[NumObjects];  // a Element Array Buffer Object - holds an array of elements (vertex indices)


// ********************************************
// This sets up for texture maps. It is called only once
// ********************************************
void SetupForTextures()
{
    // This material goes under the textures.
    // IF YOU WISH, YOU MAY DEFINE MORE THAN ONE OF THESE FOR DIFFERENT GEOMETRIES
    materialUnderTexture.SpecularColor.Set(0.9, 0.9, 0.9);
    materialUnderTexture.AmbientColor.Set(0.3, 0.3, 0.3);
    materialUnderTexture.DiffuseColor.Set(0.7, 0.7, 0.7);       // Increase or decrease to adjust brightness
    materialUnderTexture.SpecularExponent = 40.0;

    // ***********************************************
    // Load texture maps
	// ***********************************************
    RgbImage texMap;

    glUseProgram(shaderProgramBitmap);
    glActiveTexture(GL_TEXTURE0);
    glGenTextures(NumTextures, TextureNames);
    for (int i = 0; i < NumTextures; i++) {
        texMap.LoadBmpFile(TextureFiles[i]);            // Read i-th texture from the i-th file.
        glBindTexture(GL_TEXTURE_2D, TextureNames[i]);  // Bind (select) the i-th OpenGL texture

        glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_REPEAT);
        glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_REPEAT);

        // Set best quality filtering.   Also see below for disabling mipmaps.
        glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);
        glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR_MIPMAP_LINEAR);  // Requires that mipmaps be generated (see below)
        // You may also try GL_LINEAR_MIPMAP_NEAREST -- try looking at the wall from a 30 degree angle, and look for sweeping transitions.

        // Store the texture into the OpenGL texture named TextureNames[i]
        int textureWidth = texMap.GetNumCols();
        int textureHeight = texMap.GetNumRows();
        glTexImage2D(GL_TEXTURE_2D, 0, GL_RGB, textureWidth, textureHeight, 0, GL_RGB, GL_UNSIGNED_BYTE, texMap.ImageData());
 #if 1
        // Use mipmaps  (Best!)
        glGenerateMipmap(GL_TEXTURE_2D);
#else
        // Don't use mipmaps.  Try moving away from the brick wall a great distance
        glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR);
#endif

    }

    // Make sure that the shaderProgramBitmap uses the GL_TEXTURE_0 texture.
    glUseProgram(shaderProgramBitmap);
    glUniform1i(glGetUniformLocation(shaderProgramBitmap, "theTextureMap"), 0);
    glActiveTexture(GL_TEXTURE0);


}

// **********************
// This sets up geometries needed for 
//   (a) the floor (ground plane)
//   (b) the back wall
//   (c) the circular mesh
//   (d) two spheres
//   (e) one cylinder
//  It is called only once.
//  YOU NEED TO CHANGE THIS ONCE YOU ADD THE TEXTURE COORDINATES TO THE CIRCULAR SURFACE.
// **********************
void MySetupSurfaces() {

    texSphere.InitializeAttribLocations(vertPos_loc, vertNormal_loc, vertTexCoords_loc);
    texCylinder.InitializeAttribLocations(vertPos_loc, vertNormal_loc, vertTexCoords_loc);
    texTorus.InitializeAttribLocations(vertPos_loc, vertNormal_loc, vertTexCoords_loc);
    texCone.InitializeAttribLocations(vertPos_loc, vertNormal_loc, vertTexCoords_loc);
    texTeapot.InitializeAttribLocations(vertPos_loc, vertNormal_loc, vertTexCoords_loc);

    // Initialize the VAO's, VBO's and EBO's for the ground plane, the back wall
    // and the surface of rotation. Gives them the "vertPos" location,
    // and the "vertNormal"  and the "vertTexCoords" locations in the shader program.
    // No data is loaded into the VBO's or EBO's for the circular surface until the "Remesh"
    //   routines is called

    glGenVertexArrays(NumObjects, &myVAO[0]);
    glGenBuffers(NumObjects, &myVBO[0]);
    glGenBuffers(NumObjects, &myEBO[0]);

    // For the Floor:
    // Allocate the needed Vertex Array Objects (VAO's),
    //      Vertex Buffer Objects (VBO's) and Element Array Buffer Objects (EBO's)
    // Since the floor has only four vertices.  Each vertex stores its
    //    position, its normal (0,1,0) and its (s,t)-coordinates.
    // YOU DO NOT NEED TO REMESH THE FLOOR (OR THE BACK WALL) SINCE WE USE PHONG INTERPOLATION
    float floorVerts[] = {
        // Position              // Normal                  // Texture coordinates
        -5.0f, 0.0f, -5.0f,      0.0f, 1.0f, 0.0f,          0.0f, 1.0f,         // Back left
         5.0f, 0.0f, -5.0f,      0.0f, 1.0f, 0.0f,          1.0f, 1.0f,         // Back right
         5.0f, 0.0f,  5.0f,      0.0f, 1.0f, 0.0f,          1.0f, 0.0f,         // Front right
        -5.0f, 0.0f,  5.0f,      0.0f, 1.0f, 0.0f,          0.0f, 0.0f,         // Front left
    };
    unsigned int floorElts[] = { 0, 3, 1, 2 };
    glBindBuffer(GL_ARRAY_BUFFER, myVBO[iFloor]);
    glBindVertexArray(myVAO[iFloor]);
    glBufferData(GL_ARRAY_BUFFER, sizeof(floorVerts), floorVerts, GL_STATIC_DRAW);
    glVertexAttribPointer(vertPos_loc, 3, GL_FLOAT, GL_FALSE, 8 * sizeof(float), (void*)0);	   // Vertex positions in the VBO
    glEnableVertexAttribArray(vertPos_loc);									// Enable the stored vertices
    glVertexAttribPointer(vertNormal_loc, 3, GL_FLOAT, GL_FALSE, 8 * sizeof(float), (void*)(3*sizeof(float)));	// Vertex normals in the VBO
    glEnableVertexAttribArray(vertNormal_loc);									// Enable the stored vertices
    glVertexAttribPointer(vertTexCoords_loc, 2, GL_FLOAT, GL_FALSE, 8 * sizeof(float), (void*)(6 * sizeof(float)));	// Vertex texture coordinates in the VBO
    glEnableVertexAttribArray(vertTexCoords_loc);									// Enable the stored vertices
    glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, myEBO[iFloor]);
    glBufferData(GL_ELEMENT_ARRAY_BUFFER, sizeof(floorElts), floorElts, GL_STATIC_DRAW);

    // For the circular surface:
    // Allocate the needed VAO, VBO< EBO
    // The normal vectors is specified separately for each vertex. (It is not a generic attribute.)
    // YOU MUST MODIFY THIS TO (A) USE STRIDES OF 8 *sizeof(float), (B) COMMENT IN THE LINES FOR vertTexCoords 
    glBindVertexArray(myVAO[iCircularSurf]);
    glBindBuffer(GL_ARRAY_BUFFER, myVBO[iCircularSurf]);
    glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, myEBO[iCircularSurf]);
    glVertexAttribPointer(vertPos_loc, 3, GL_FLOAT, GL_FALSE, 8 * sizeof(float), (void*)0);	// Store vertices in the VBO
    glEnableVertexAttribArray(vertPos_loc);									// Enable the stored vertices
    glVertexAttribPointer(vertNormal_loc, 3, GL_FLOAT, GL_FALSE, 8 * sizeof(float), (void*)(3 * sizeof(float))); // Store normals in the VBO
    glEnableVertexAttribArray(vertNormal_loc);                                 // Enabled the stored normals (so they are not generic)
    // ONCE YOU HAVE TEXTURE COORDINATES WORKING FOR THE CIRCULAR SURFACE,
    //   PUT THE NEXT TWO LINES BACK IN, AND CHANGE THE STRIDE FACTOR TO "8" IN THE PREVIOUS CALLS TO glVertexAttribPointer.
    glVertexAttribPointer(vertTexCoords_loc, 2, GL_FLOAT, GL_FALSE, 8 * sizeof(float), (void*)(6 * sizeof(float)));	// Vertex texture coordinates in the VBO
    glEnableVertexAttribArray(vertTexCoords_loc);									// Enable the stored vertices

    // No data has been loaded into the VBO's for the circular surface yet.
    // This is done by the "SamsRemeshCircularSurf" routine.

    SamsRemeshCircularSurf();

    // Back wall 
    float wallvert[] = {
        // Position              // Normal                  // Texture coordinates
        -5.0f, 0.0f, -5.0f,      0.0f, 0.0f, 1.0f,          0.0f, 0.0f,         // Bottom left
         5.0f, 0.0f, -5.0f,      0.0f, 0.0f, 1.0f,          1.0f, 0.0f,         // Bottom right
         5.0f, 5.0f, -5.0f,      0.0f, 0.0f, 1.0f,          1.0f, 1.0f,         // Top right
        -5.0f, 5.0f, -5.0f,      0.0f, 0.0f, 1.0f,          0.0f, 1.0f,         // Top left
    };
    unsigned int wallElts[] = { 3, 0, 2, 1 };
    glBindBuffer(GL_ARRAY_BUFFER, myVBO[iWall]);
    glBindVertexArray(myVAO[iWall]);
    glBufferData(GL_ARRAY_BUFFER, sizeof(wallvert), wallvert, GL_STATIC_DRAW);
    glVertexAttribPointer(vertPos_loc, 3, GL_FLOAT, GL_FALSE, 8 * sizeof(float), (void*)0);	   // Vertex positions in the VBO
    glEnableVertexAttribArray(vertPos_loc);									// Enable the stored vertices
    glVertexAttribPointer(vertNormal_loc, 3, GL_FLOAT, GL_FALSE, 8 * sizeof(float), (void*)(3 * sizeof(float)));	// Vertex normals in the VBO
    glEnableVertexAttribArray(vertNormal_loc);									// Enable the stored vertices
    glVertexAttribPointer(vertTexCoords_loc, 2, GL_FLOAT, GL_FALSE, 8 * sizeof(float), (void*)(6 * sizeof(float)));	// Vertex texture coordinates in the VBO
    glEnableVertexAttribArray(vertTexCoords_loc);									// Enable the stored vertices
    glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, myEBO[iWall]);
    glBufferData(GL_ELEMENT_ARRAY_BUFFER, sizeof(wallElts), wallElts, GL_STATIC_DRAW);


    // Left wall
    float Lwallvert[] = {
        // Position              // Normal                  // Texture coordinates
        -5.0f, 0.0f, -5.0f,      1.0f, 0.0f, 0.0f,          1.0f, 0.0f,         // Bottom right
        -5.0f, 0.0f,  5.0f,      1.0f, 0.0f, 0.0f,          0.0f, 0.0f,         // Bottom left
        -5.0f, 5.0f,  5.0f,      1.0f, 0.0f, 0.0f,          0.0f, 1.0f,         // Top left
        -5.0f, 5.0f, -5.0f,      1.0f, 0.0f, 0.0f,          1.0f, 1.0f,         // Top Right
    };
    unsigned int LwallElts[] = { 2, 1, 3, 0 };
    glBindBuffer(GL_ARRAY_BUFFER, myVBO[iWallL]);
    glBindVertexArray(myVAO[iWallL]);
    glBufferData(GL_ARRAY_BUFFER, sizeof(Lwallvert), Lwallvert, GL_STATIC_DRAW);
    glVertexAttribPointer(vertPos_loc, 3, GL_FLOAT, GL_FALSE, 8 * sizeof(float), (void*)0);	   // Vertex positions in the VBO
    glEnableVertexAttribArray(vertPos_loc);									// Enable the stored vertices
    glVertexAttribPointer(vertNormal_loc, 3, GL_FLOAT, GL_FALSE, 8 * sizeof(float), (void*)(3 * sizeof(float)));	// Vertex normals in the VBO
    glEnableVertexAttribArray(vertNormal_loc);									// Enable the stored vertices
    glVertexAttribPointer(vertTexCoords_loc, 2, GL_FLOAT, GL_FALSE, 8 * sizeof(float), (void*)(6 * sizeof(float)));	// Vertex texture coordinates in the VBO
    glEnableVertexAttribArray(vertTexCoords_loc);									// Enable the stored vertices
    glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, myEBO[iWallL]);
    glBufferData(GL_ELEMENT_ARRAY_BUFFER, sizeof(LwallElts), LwallElts, GL_STATIC_DRAW);

    // Right wall
    float Rwallvert[] = {
        // Position              // Normal                  // Texture coordinates
        5.0f, 0.0f,  5.0f,      -1.0f, 0.0f, 0.0f,          1.0f, 0.0f,         // Bottom right
        5.0f, 0.0f, -5.0f,      -1.0f, 0.0f, 0.0f,          0.0f, 0.0f,         // Bottom left
        5.0f, 5.0f, -5.0f,      -1.0f, 0.0f, 0.0f,          0.0f, 1.0f,         // Top left
        5.0f, 5.0f,  5.0f,      -1.0f, 0.0f, 0.0f,          1.0f, 1.0f,         // Top Right
    };
    unsigned int RwallElts[] = { 2, 1, 3, 0 };
    glBindBuffer(GL_ARRAY_BUFFER, myVBO[iWallR]);
    glBindVertexArray(myVAO[iWallR]);
    glBufferData(GL_ARRAY_BUFFER, sizeof(Rwallvert), Rwallvert, GL_STATIC_DRAW);
    glVertexAttribPointer(vertPos_loc, 3, GL_FLOAT, GL_FALSE, 8 * sizeof(float), (void*)0);	   // Vertex positions in the VBO
    glEnableVertexAttribArray(vertPos_loc);									// Enable the stored vertices
    glVertexAttribPointer(vertNormal_loc, 3, GL_FLOAT, GL_FALSE, 8 * sizeof(float), (void*)(3 * sizeof(float)));	// Vertex normals in the VBO
    glEnableVertexAttribArray(vertNormal_loc);									// Enable the stored vertices
    glVertexAttribPointer(vertTexCoords_loc, 2, GL_FLOAT, GL_FALSE, 8 * sizeof(float), (void*)(6 * sizeof(float)));	// Vertex texture coordinates in the VBO
    glEnableVertexAttribArray(vertTexCoords_loc);									// Enable the stored vertices
    glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, myEBO[iWallR]);
    glBufferData(GL_ELEMENT_ARRAY_BUFFER, sizeof(RwallElts), RwallElts, GL_STATIC_DRAW);

    // Sofa Base
    float Cubevert[] = {
        // Position              // Normal                  // Texture coordinates
        0.0f, 1.0f,  0.0f,       0.0f, 0.0f, 1.0f,          0.0f, 1.0f,         // Bottom right
        0.0f, 0.0f,  0.0f,       0.0f, 0.0f, 1.0f,          0.0f, 0.0f,         // Bottom left
        1.0f, 1.0f,  0.0f,       1.0f, 0.0f, 0.0f,          1.0f, 1.0f,         // Top left
        1.0f, 0.0f,  0.0f,       1.0f, 0.0f, 0.0f,          1.0f, 0.0f,         // Top Right
        1.0f, 1.0f, -1.0f,       0.0f, 0.0f, -1.0f,         2.0f, 1.0f,         // Bottom right
        1.0f, 0.0f, -1.0f,       0.0f, 0.0f, -1.0f,         2.0f, 0.0f,         // Bottom left
        0.0f, 1.0f, -1.0f,      -1.0f, 0.0f, 0.0f,          3.0f, 1.0f,         // Top left
        0.0f, 0.0f, -1.0f,      -1.0f, 0.0f, 0.0f,          3.0f, 0.0f,         // Top Right
        0.0f, 1.0f,  0.0f,       0.0f, 0.0f, 1.0f,          4.0f, 1.0f,         // Bottom right
        0.0f, 0.0f,  0.0f,       0.0f, 0.0f, 1.0f,          4.0f, 0.0f,         // Bottom left
    };
    unsigned int CubeElts [] = { 0,1,2,3,4,5,6,7,8,9 };
    glBindBuffer(GL_ARRAY_BUFFER, myVBO[iCube]);
    glBindVertexArray(myVAO[iCube]);
    glBufferData(GL_ARRAY_BUFFER, sizeof(Cubevert), Cubevert, GL_STATIC_DRAW);
    glVertexAttribPointer(vertPos_loc, 3, GL_FLOAT, GL_FALSE, 8 * sizeof(float), (void*)0);	   // Vertex positions in the VBO
    glEnableVertexAttribArray(vertPos_loc);									// Enable the stored vertices
    glVertexAttribPointer(vertNormal_loc, 3, GL_FLOAT, GL_FALSE, 8 * sizeof(float), (void*)(3 * sizeof(float)));	// Vertex normals in the VBO
    glEnableVertexAttribArray(vertNormal_loc);									// Enable the stored vertices
    glVertexAttribPointer(vertTexCoords_loc, 2, GL_FLOAT, GL_FALSE, 8 * sizeof(float), (void*)(6 * sizeof(float)));	// Vertex texture coordinates in the VBO
    glEnableVertexAttribArray(vertTexCoords_loc);									// Enable the stored vertices
    glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, myEBO[iCube]);
    glBufferData(GL_ELEMENT_ARRAY_BUFFER, sizeof(CubeElts), CubeElts, GL_STATIC_DRAW);

    check_for_opengl_errors();      // Watch the console window for error messages!

    // Sofa Top
    float CubeTopvert[] = {
        // Position              // Normal                  // Texture coordinates
        0.0f, 0.0f,  0.0f,       0.0f, 1.0f, 0.0f,          0.0f, 1.0f,         // Top Left
        0.0f, 0.0f,  1.0f,       0.0f, 1.0f, 0.0f,          0.0f, 0.0f,         // Bottom left
        1.0f, 0.0f,  0.0f,       0.0f, 1.0f, 0.0f,          1.0f, 1.0f,         // Top Right
        1.0f, 0.0f,  1.0f,       0.0f, 1.0f, 0.0f,          1.0f, 0.0f,         // Bottom Right

    };
    unsigned int CubeTopElts[] = { 0,1,2,3};
    glBindBuffer(GL_ARRAY_BUFFER, myVBO[iCubeTop]);
    glBindVertexArray(myVAO[iCubeTop]);
    glBufferData(GL_ARRAY_BUFFER, sizeof(CubeTopvert), CubeTopvert, GL_STATIC_DRAW);
    glVertexAttribPointer(vertPos_loc, 3, GL_FLOAT, GL_FALSE, 8 * sizeof(float), (void*)0);	   // Vertex positions in the VBO
    glEnableVertexAttribArray(vertPos_loc);									// Enable the stored vertices
    glVertexAttribPointer(vertNormal_loc, 3, GL_FLOAT, GL_FALSE, 8 * sizeof(float), (void*)(3 * sizeof(float)));	// Vertex normals in the VBO
    glEnableVertexAttribArray(vertNormal_loc);									// Enable the stored vertices
    glVertexAttribPointer(vertTexCoords_loc, 2, GL_FLOAT, GL_FALSE, 8 * sizeof(float), (void*)(6 * sizeof(float)));	// Vertex texture coordinates in the VBO
    glEnableVertexAttribArray(vertTexCoords_loc);									// Enable the stored vertices
    glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, myEBO[iCubeTop]);
    glBufferData(GL_ELEMENT_ARRAY_BUFFER, sizeof(CubeTopElts), CubeTopElts, GL_STATIC_DRAW);

    check_for_opengl_errors();      // Watch the console window for error messages!
}

void MyRemeshGeometries() 
{
// IT IS NOT NECESSARY TO REMESH EITHER THE FLOOR OR THE BACK WALL
// YOU DO NOT NEED TO CHANGE THIS FOR PROJECT #6.

    SamsRemeshCircularSurf();
    texSphere.Remesh(meshRes, meshRes);
    texCylinder.Remesh(meshRes, meshRes, meshRes);
    texTorus.Remesh(meshRes, meshRes );
    texCone.Remesh(meshRes, meshRes, meshRes);
    texTeapot.Remesh(meshRes, meshRes);

    check_for_opengl_errors();      // Watch the console window for error messages!
}

// **********************************************
// MODIFY THIS ROUTINE TO RENDER THE FLOOR, THE BACK WALL,
//    AND THE SPHERES AND THE CYLINDER. -- WITH TEXTURES
// **********************************************

void MyRenderGeometries() {


    float matEntries[16];       // Temporary storage for floats
    // ******
    // Render the Floor - using a procedural texture map
    // ******
    selectShaderProgram(shaderProgramBitmap);
    glBindVertexArray(myVAO[iFloor]);                // Select the floor VAO (Vertex Array Object)
    materialUnderTexture.LoadIntoShaders();         // Use the bright underlying color
    viewMatrix.DumpByColumns(matEntries);           // Apply the model view matrix
    glUniformMatrix4fv(modelviewMatLocation, 1, false, matEntries);
    glUniform1i(applyTextureLocation, true);           // Enable applying the texture!
    // Draw the floor as a single triangle strip
    glBindTexture(GL_TEXTURE_2D, TextureNames[1]);
    glDrawElements(GL_TRIANGLE_STRIP, 4, GL_UNSIGNED_INT, (void*)0);    
    glUniform1i(applyTextureLocation, false);           // Turn off applying texture!
    check_for_opengl_errors();

    if (renderFloorOnly) {
        return;
    }

    // **************
    // Render the circular surface
    //selectShaderProgram(shaderProgramBitmap);
    //SamsRenderCircularSurf();

    // ************ 
    // Render Walls
    // Render the back wall
    glEnable(GL_POLYGON_OFFSET_FILL);
    selectShaderProgram(shaderProgramBitmap);
    glBindVertexArray(myVAO[iWall]);                // Select the floor VAO (Vertex Array Object)
    materialUnderTexture.LoadIntoShaders();         // Use the bright underlying color
    viewMatrix.DumpByColumns(matEntries);           // Apply the model view matrix
    glUniformMatrix4fv(modelviewMatLocation, 1, false, matEntries);
    glUniform1i(applyTextureLocation, true);           // Enable applying the texture!
    glBindTexture(GL_TEXTURE_2D, TextureNames[0]);
    glDrawElements(GL_TRIANGLE_STRIP, 4, GL_UNSIGNED_INT, (void*)0);
    glUniform1i(applyTextureLocation, false);           // Turn off applying texture!
    check_for_opengl_errors();

    // Render the Left wall
    selectShaderProgram(shaderProgramBitmap);
    glBindVertexArray(myVAO[iWallL]);                // Select the floor VAO (Vertex Array Object)
    materialUnderTexture.LoadIntoShaders();         // Use the bright underlying color
    viewMatrix.DumpByColumns(matEntries);           // Apply the model view matrix
    glUniformMatrix4fv(modelviewMatLocation, 1, false, matEntries);
    glUniform1i(applyTextureLocation, true);           // Enable applying the texture!
    glPolygonOffset(1.0, 1.0);
    glBindTexture(GL_TEXTURE_2D, TextureNames[20]);
    glDrawElements(GL_TRIANGLE_STRIP, 4, GL_UNSIGNED_INT, (void*)0);
    glUniform1i(applyTextureLocation, false);           // Turn off applying texture!
    check_for_opengl_errors();

    // Render the Right wall
    selectShaderProgram(shaderProgramBitmap);
    glBindVertexArray(myVAO[iWallR]);                // Select the floor VAO (Vertex Array Object)
    materialUnderTexture.LoadIntoShaders();         // Use the bright underlying color
    viewMatrix.DumpByColumns(matEntries);           // Apply the model view matrix
    glUniformMatrix4fv(modelviewMatLocation, 1, false, matEntries);
    glUniform1i(applyTextureLocation, true);           // Enable applying the texture!
    glPolygonOffset(1.0, 1.0);
    glBindTexture(GL_TEXTURE_2D, TextureNames[20]);
    glDrawElements(GL_TRIANGLE_STRIP, 4, GL_UNSIGNED_INT, (void*)0);
    glUniform1i(applyTextureLocation, false);           // Turn off applying texture!
    check_for_opengl_errors();



    // Render SOFA
    // Render the SofaBaseOne
    LinearMapR4 matDemo = viewMatrix;
    matDemo.Mult_glTranslate(-4.90f, 0.3f, -1.0f);
    matDemo.Mult_glScale(1.8f, 0.6f, 3.0f);
    selectShaderProgram(shaderProgramBitmap);
    glBindVertexArray(myVAO[iCube]);                // Select the floor VAO (Vertex Array Object)
    materialUnderTexture.LoadIntoShaders();         // Use the bright underlying color
    matDemo.DumpByColumns(matEntries);           // Apply the model view matrix
    glUniformMatrix4fv(modelviewMatLocation, 1, false, matEntries);
    glUniform1i(applyTextureLocation, true);           // Enable applying the texture!
    glBindTexture(GL_TEXTURE_2D, TextureNames[2]);
    glDrawElements(GL_TRIANGLE_STRIP, 10, GL_UNSIGNED_INT, (void*)0);
    check_for_opengl_errors();


    matDemo.Mult_glTranslate(0, 1, -1.0f);
    selectShaderProgram(shaderProgramBitmap);
    glBindVertexArray(myVAO[iCubeTop]);                // Select the floor VAO (Vertex Array Object)
    materialUnderTexture.LoadIntoShaders();         // Use the bright underlying color
    matDemo.DumpByColumns(matEntries);           // Apply the model view matrix
    glUniformMatrix4fv(modelviewMatLocation, 1, false, matEntries);
    glDrawElements(GL_TRIANGLE_STRIP, 4, GL_UNSIGNED_INT, (void*)0);
    check_for_opengl_errors();

    matDemo.Mult_glTranslate(0, -1, 0);
    matDemo.Mult_glRotate(3.14159,0, 0, 1);
    matDemo.Mult_glTranslate(-1, 0, 0);
    selectShaderProgram(shaderProgramBitmap);
    glBindVertexArray(myVAO[iCubeTop]);                // Select the floor VAO (Vertex Array Object)
    materialUnderTexture.LoadIntoShaders();         // Use the bright underlying color
    matDemo.DumpByColumns(matEntries);           // Apply the model view matrix
    glUniformMatrix4fv(modelviewMatLocation, 1, false, matEntries);
    glDrawElements(GL_TRIANGLE_STRIP, 4, GL_UNSIGNED_INT, (void*)0);
    check_for_opengl_errors();


    // Render the SofaBaseTwo
    matDemo = viewMatrix;
    matDemo.Mult_glRotate(1.5708f, 0.0f, 1.0f, 0.0f);
    matDemo.Mult_glTranslate(-.8, 0.3, .10);
    matDemo.Mult_glScale(1.8f, 0.6f, 5.0f);
    selectShaderProgram(shaderProgramBitmap);
    glBindVertexArray(myVAO[iCube]);                // Select the floor VAO (Vertex Array Object)
    materialUnderTexture.LoadIntoShaders();         // Use the bright underlying color
    matDemo.DumpByColumns(matEntries);           // Apply the model view matrix
    glUniformMatrix4fv(modelviewMatLocation, 1, false, matEntries);
    glDrawElements(GL_TRIANGLE_STRIP, 10, GL_UNSIGNED_INT, (void*)0);
    check_for_opengl_errors();

    matDemo.Mult_glTranslate(0, 1, -1.0f);
    selectShaderProgram(shaderProgramBitmap);
    glBindVertexArray(myVAO[iCubeTop]);                // Select the floor VAO (Vertex Array Object)
    materialUnderTexture.LoadIntoShaders();         // Use the bright underlying color
    matDemo.DumpByColumns(matEntries);           // Apply the model view matrix
    glUniformMatrix4fv(modelviewMatLocation, 1, false, matEntries);
    glDrawElements(GL_TRIANGLE_STRIP, 4, GL_UNSIGNED_INT, (void*)0);
    check_for_opengl_errors();

    matDemo.Mult_glTranslate(0, -1, 0);
    matDemo.Mult_glRotate(3.14159, 0, 0, 1);
    matDemo.Mult_glTranslate(-1, 0, 0);
    selectShaderProgram(shaderProgramBitmap);
    glBindVertexArray(myVAO[iCubeTop]);                // Select the floor VAO (Vertex Array Object)
    materialUnderTexture.LoadIntoShaders();         // Use the bright underlying color
    matDemo.DumpByColumns(matEntries);           // Apply the model view matrix
    glUniformMatrix4fv(modelviewMatLocation, 1, false, matEntries);
    glDrawElements(GL_TRIANGLE_STRIP, 4, GL_UNSIGNED_INT, (void*)0);
    check_for_opengl_errors();
    glUniform1i(applyTextureLocation, false);           // Turn off applying texture!

    // Render the SofaTopOne
    matDemo = viewMatrix;
    matDemo.Mult_glTranslate(-4.90f, .9f, 0.6f);
    matDemo.Mult_glScale(0.2, 1, 4.6f);
    selectShaderProgram(shaderProgramBitmap);
    glBindVertexArray(myVAO[iCube]);                // Select the floor VAO (Vertex Array Object)
    materialUnderTexture.LoadIntoShaders();         // Use the bright underlying color
    matDemo.DumpByColumns(matEntries);           // Apply the model view matrix
    glUniformMatrix4fv(modelviewMatLocation, 1, false, matEntries);
    glUniform1i(applyTextureLocation, true);           // Enable applying the texture!
    glBindTexture(GL_TEXTURE_2D, TextureNames[2]);
    glDrawElements(GL_TRIANGLE_STRIP, 10, GL_UNSIGNED_INT, (void*)0);
    check_for_opengl_errors();

    matDemo.Mult_glTranslate(0, 1, -1.0f);
    selectShaderProgram(shaderProgramBitmap);
    glBindVertexArray(myVAO[iCubeTop]);                // Select the floor VAO (Vertex Array Object)
    materialUnderTexture.LoadIntoShaders();         // Use the bright underlying color
    matDemo.DumpByColumns(matEntries);           // Apply the model view matrix
    glUniformMatrix4fv(modelviewMatLocation, 1, false, matEntries);
    glDrawElements(GL_TRIANGLE_STRIP, 4, GL_UNSIGNED_INT, (void*)0);
    check_for_opengl_errors();

    matDemo.Mult_glTranslate(0, -1, 0);
    matDemo.Mult_glRotate(3.14159, 0, 0, 1);
    matDemo.Mult_glTranslate(-1, 0, 0);
    selectShaderProgram(shaderProgramBitmap);
    glBindVertexArray(myVAO[iCubeTop]);                // Select the floor VAO (Vertex Array Object)
    materialUnderTexture.LoadIntoShaders();         // Use the bright underlying color
    matDemo.DumpByColumns(matEntries);           // Apply the model view matrix
    glUniformMatrix4fv(modelviewMatLocation, 1, false, matEntries);
    glDrawElements(GL_TRIANGLE_STRIP, 4, GL_UNSIGNED_INT, (void*)0);
    check_for_opengl_errors();

    // Render the SofaTopTwo
    matDemo = viewMatrix;
    matDemo.Mult_glRotate(1.5708f, 0.0f, 1.0f, 0.0f);
    matDemo.Mult_glTranslate(-.8, 0.9, -0.9);
    matDemo.Mult_glScale(.2, 1, 4.0f);
    selectShaderProgram(shaderProgramBitmap);
    glBindVertexArray(myVAO[iCube]);                // Select the floor VAO (Vertex Array Object)
    materialUnderTexture.LoadIntoShaders();         // Use the bright underlying color
    matDemo.DumpByColumns(matEntries);           // Apply the model view matrix
    glUniformMatrix4fv(modelviewMatLocation, 1, false, matEntries);
    glDrawElements(GL_TRIANGLE_STRIP, 10, GL_UNSIGNED_INT, (void*)0);
    check_for_opengl_errors();

    matDemo.Mult_glTranslate(0, 1, -1.0f);
    selectShaderProgram(shaderProgramBitmap);
    glBindVertexArray(myVAO[iCubeTop]);                // Select the floor VAO (Vertex Array Object)
    materialUnderTexture.LoadIntoShaders();         // Use the bright underlying color
    matDemo.DumpByColumns(matEntries);           // Apply the model view matrix
    glUniformMatrix4fv(modelviewMatLocation, 1, false, matEntries);
    glDrawElements(GL_TRIANGLE_STRIP, 4, GL_UNSIGNED_INT, (void*)0);
    check_for_opengl_errors();

    matDemo.Mult_glTranslate(0, -1, 0);
    matDemo.Mult_glRotate(3.14159, 0, 0, 1);
    matDemo.Mult_glTranslate(-1, 0, 0);
    selectShaderProgram(shaderProgramBitmap);
    glBindVertexArray(myVAO[iCubeTop]);                // Select the floor VAO (Vertex Array Object)
    materialUnderTexture.LoadIntoShaders();         // Use the bright underlying color
    matDemo.DumpByColumns(matEntries);           // Apply the model view matrix
    glUniformMatrix4fv(modelviewMatLocation, 1, false, matEntries);
    glDrawElements(GL_TRIANGLE_STRIP, 4, GL_UNSIGNED_INT, (void*)0);
    check_for_opengl_errors();
    glUniform1i(applyTextureLocation, false);           // Turn off applying texture!

    // Cushion as Cylinder Set One
    matDemo = viewMatrix;
    matDemo.Mult_glTranslate(-4.5, 1.4, -3.2);
    matDemo.Mult_glRotate(1.57, 1.0, 0.0, 0.0);
    matDemo.Mult_glRotate(-1.70, 0.0, -1.0, 0.0);
    matDemo.Mult_glScale(0.65, 0.7, 0.23);
    matDemo.DumpByColumns(matEntries);           // Apply the model view matrix
    glUniformMatrix4fv(modelviewMatLocation, 1, false, matEntries);
    glBindTexture(GL_TEXTURE_2D, TextureNames[5]);     // Choose texture
    glUniform1i(applyTextureLocation, true);           // Enable applying the texture!
    texCylinder.RenderSide();                             // Render the sphere side
    glUniform1i(applyTextureLocation, false);             // Turn off applying texture!
    glBindTexture(GL_TEXTURE_2D, TextureNames[2]);     // Choose texture
    glUniform1i(applyTextureLocation, true);
    texCylinder.RenderTop();                              // RENDER THIS WITH A TEXTURE MAP
    texCylinder.RenderBase();                             // RENDER THIS WITH A TEXTURE MAP
    glUniform1i(applyTextureLocation, false);

    matDemo.Mult_glTranslate(0, 2.05, 0);
    matDemo.DumpByColumns(matEntries);           // Apply the model view matrix
    glUniformMatrix4fv(modelviewMatLocation, 1, false, matEntries);
    glBindTexture(GL_TEXTURE_2D, TextureNames[5]);     // Choose texture
    glUniform1i(applyTextureLocation, true);           // Enable applying the texture!
    texCylinder.RenderSide();                             // Render the sphere side
    glUniform1i(applyTextureLocation, false);             // Turn off applying texture!
    glBindTexture(GL_TEXTURE_2D, TextureNames[2]);     // Choose texture
    glUniform1i(applyTextureLocation, true);
    texCylinder.RenderTop();                              // RENDER THIS WITH A TEXTURE MAP
    texCylinder.RenderBase();                             // RENDER THIS WITH A TEXTURE MAP
    glUniform1i(applyTextureLocation, false);

    matDemo.Mult_glTranslate(0, 2.05, 0);
    matDemo.DumpByColumns(matEntries);           // Apply the model view matrix
    glUniformMatrix4fv(modelviewMatLocation, 1, false, matEntries);
    glBindTexture(GL_TEXTURE_2D, TextureNames[5]);     // Choose texture
    glUniform1i(applyTextureLocation, true);           // Enable applying the texture!
    texCylinder.RenderSide();                             // Render the sphere side
    glUniform1i(applyTextureLocation, false);             // Turn off applying texture!
    glBindTexture(GL_TEXTURE_2D, TextureNames[2]);     // Choose texture
    glUniform1i(applyTextureLocation, true);
    texCylinder.RenderTop();                              // RENDER THIS WITH A TEXTURE MAP
    texCylinder.RenderBase();                             // RENDER THIS WITH A TEXTURE MAP
    glUniform1i(applyTextureLocation, false);

    // Cushion as Cylinder Set Two
    matDemo = viewMatrix;
    matDemo.Mult_glTranslate(-3.5, 1.4, 0.4);
    matDemo.Mult_glRotate(1.57, 0.0, 0.0, 1.0);
    matDemo.Mult_glRotate(0.122, 0.0, -1.0, 0.0);
    matDemo.Mult_glScale(0.65, 0.84, 0.23);
    matDemo.DumpByColumns(matEntries);           // Apply the model view matrix
    glUniformMatrix4fv(modelviewMatLocation, 1, false, matEntries);
    glBindTexture(GL_TEXTURE_2D, TextureNames[5]);     // Choose texture
    glUniform1i(applyTextureLocation, true);           // Enable applying the texture!
    texCylinder.RenderSide();                             // Render the sphere side
    glUniform1i(applyTextureLocation, false);             // Turn off applying texture!
    glBindTexture(GL_TEXTURE_2D, TextureNames[2]);     // Choose texture
    glUniform1i(applyTextureLocation, true);
    texCylinder.RenderTop();                              // RENDER THIS WITH A TEXTURE MAP
    texCylinder.RenderBase();                             // RENDER THIS WITH A TEXTURE MAP
    glUniform1i(applyTextureLocation, false);

    matDemo.Mult_glTranslate(0, -2.05, 0);
    matDemo.DumpByColumns(matEntries);           // Apply the model view matrix
    glUniformMatrix4fv(modelviewMatLocation, 1, false, matEntries);
    glBindTexture(GL_TEXTURE_2D, TextureNames[5]);     // Choose texture
    glUniform1i(applyTextureLocation, true);           // Enable applying the texture!
    texCylinder.RenderSide();                             // Render the sphere side
    glUniform1i(applyTextureLocation, false);             // Turn off applying texture!
    glBindTexture(GL_TEXTURE_2D, TextureNames[2]);     // Choose texture
    glUniform1i(applyTextureLocation, true);
    texCylinder.RenderTop();                              // RENDER THIS WITH A TEXTURE MAP
    texCylinder.RenderBase();                             // RENDER THIS WITH A TEXTURE MAP
    glUniform1i(applyTextureLocation, false);

    // Cushion as Cylinder Set Three
    matDemo = viewMatrix;
    matDemo.Mult_glTranslate(-2.3, .88, -0.1);
    matDemo.Mult_glRotate(1.57, 0.0, 0.0, 1.0);
    matDemo.Mult_glScale(.14, 2.4, 0.9);
    matDemo.DumpByColumns(matEntries);           // Apply the model view matrix
    glUniformMatrix4fv(modelviewMatLocation, 1, false, matEntries);
    glBindTexture(GL_TEXTURE_2D, TextureNames[5]);     // Choose texture
    glUniform1i(applyTextureLocation, true);           // Enable applying the texture!
    texCylinder.Render();                             // Render the sphere side                           // RENDER THIS WITH A TEXTURE MAP
    glUniform1i(applyTextureLocation, false);

    matDemo = viewMatrix;
    matDemo.Mult_glTranslate(-4, .88, -2);
    matDemo.Mult_glRotate(1.57, 0.0, 0.0, 1.0);
    matDemo.Mult_glRotate(1.57, 1.0, 0.0, 0.0);
    matDemo.Mult_glScale(.14, 1.998, 0.9);
    matDemo.DumpByColumns(matEntries);           // Apply the model view matrix
    glUniformMatrix4fv(modelviewMatLocation, 1, false, matEntries);
    glBindTexture(GL_TEXTURE_2D, TextureNames[5]);     // Choose texture
    glUniform1i(applyTextureLocation, true);           // Enable applying the texture!
    texCylinder.Render();                             // Render the sphere side                          // RENDER THIS WITH A TEXTURE MAP
    glUniform1i(applyTextureLocation, false);

    // Leg for Sofa
    matDemo = viewMatrix;
    matDemo.Mult_glTranslate(-0.2, .20, .67);
    matDemo.Mult_glScale(0.1, 0.20, 0.1);
    matDemo.DumpByColumns(matEntries);           // Apply the model view matrix
    glUniformMatrix4fv(modelviewMatLocation, 1, false, matEntries);
    glBindTexture(GL_TEXTURE_2D, TextureNames[4]);     // Choose texture
    glUniform1i(applyTextureLocation, true);           // Enable applying the texture!
    texCylinder.Render();
    matDemo.Mult_glTranslate(0, 0, -15);
    matDemo.DumpByColumns(matEntries);           // Apply the model view matrix// Render the sphere side
    glUniformMatrix4fv(modelviewMatLocation, 1, false, matEntries);
    texCylinder.Render();

    matDemo.Mult_glTranslate(-45, 0, 0);
    matDemo.DumpByColumns(matEntries);           // Apply the model view matrix// Render the sphere side
    glUniformMatrix4fv(modelviewMatLocation, 1, false, matEntries);
    texCylinder.Render();

    matDemo.Mult_glTranslate(0, 0, 15);
    matDemo.DumpByColumns(matEntries);           // Apply the model view matrix// Render the sphere side
    glUniformMatrix4fv(modelviewMatLocation, 1, false, matEntries);
    texCylinder.Render();

    matDemo.Mult_glTranslate(0, 0, -18);
    matDemo.DumpByColumns(matEntries);           // Apply the model view matrix// Render the sphere side
    glUniformMatrix4fv(modelviewMatLocation, 1, false, matEntries);
    texCylinder.Render();

    matDemo.Mult_glTranslate(14, 0, 0);
    matDemo.DumpByColumns(matEntries);           // Apply the model view matrix// Render the sphere side
    glUniformMatrix4fv(modelviewMatLocation, 1, false, matEntries);
    texCylinder.Render();

    matDemo.Mult_glTranslate(0, 0, -27);
    matDemo.DumpByColumns(matEntries);           // Apply the model view matrix// Render the sphere side
    glUniformMatrix4fv(modelviewMatLocation, 1, false, matEntries);
    texCylinder.Render();

    matDemo.Mult_glTranslate(-14, 0, 0);
    matDemo.DumpByColumns(matEntries);           // Apply the model view matrix// Render the sphere side
    glUniformMatrix4fv(modelviewMatLocation, 1, false, matEntries);
    texCylinder.Render();

    glUniform1i(applyTextureLocation, false);             // Turn off applying texture!


    // Render Speakers
    //Speaker 1
    matDemo = viewMatrix;
    matDemo.Mult_glTranslate(-4.7, 2.5, -4.5);
    matDemo.Mult_glRotate(1.5708, 1, 0, 0);
    matDemo.Mult_glRotate(0.523599, 0, 0, -1);
    matDemo.Mult_glScale(1, 1, 2);
    selectShaderProgram(shaderProgramBitmap);
    glBindVertexArray(myVAO[iCube]);                // Select the floor VAO (Vertex Array Object)
    materialUnderTexture.LoadIntoShaders();         // Use the bright underlying color
    matDemo.DumpByColumns(matEntries);           // Apply the model view matrix
    glUniformMatrix4fv(modelviewMatLocation, 1, false, matEntries);
    glUniform1i(applyTextureLocation, true);           // Enable applying the texture!
    glBindTexture(GL_TEXTURE_2D, TextureNames[2]);
    glDrawElements(GL_TRIANGLE_STRIP, 10, GL_UNSIGNED_INT, (void*)0);
    check_for_opengl_errors();

    LinearMapR4 matDemo2 = matDemo;
    matDemo2.Mult_glTranslate(0, 0, -1.0f);
    matDemo2.Mult_glRotate(3.14159, 0, 0, 1.0f);
    matDemo2.Mult_glTranslate(-1, 0, 0);
    selectShaderProgram(shaderProgramBitmap);
    glBindVertexArray(myVAO[iCubeTop]);                // Select the floor VAO (Vertex Array Object)
    materialUnderTexture.LoadIntoShaders();         // Use the bright underlying color
    matDemo2.DumpByColumns(matEntries);           // Apply the model view matrix
    glUniformMatrix4fv(modelviewMatLocation, 1, false, matEntries);
    glDrawElements(GL_TRIANGLE_STRIP, 4, GL_UNSIGNED_INT, (void*)0);
    check_for_opengl_errors();

    matDemo2.Mult_glTranslate(0, -1, 0);
    matDemo2.Mult_glRotate(3.14159, 0, 0, 1.0f);
    matDemo2.Mult_glTranslate(-1, 0, 0);
    matDemo2.Mult_glScale(1, 1, .5);
    selectShaderProgram(shaderProgramBitmap);
    glBindVertexArray(myVAO[iCubeTop]);                // Select the floor VAO (Vertex Array Object)
    materialUnderTexture.LoadIntoShaders();         // Use the bright underlying color
    matDemo2.DumpByColumns(matEntries);           // Apply the model view matrix
    glUniformMatrix4fv(modelviewMatLocation, 1, false, matEntries);
    glBindTexture(GL_TEXTURE_2D, TextureNames[3]);
    glDrawElements(GL_TRIANGLE_STRIP, 4, GL_UNSIGNED_INT, (void*)0);
    check_for_opengl_errors();

    matDemo2.Mult_glTranslate(0, 0, 1);
    selectShaderProgram(shaderProgramBitmap);
    glBindVertexArray(myVAO[iCubeTop]);                // Select the floor VAO (Vertex Array Object)
    materialUnderTexture.LoadIntoShaders();         // Use the bright underlying color
    matDemo2.DumpByColumns(matEntries);           // Apply the model view matrix
    glUniformMatrix4fv(modelviewMatLocation, 1, false, matEntries);
    glBindTexture(GL_TEXTURE_2D, TextureNames[6]);
    glDrawElements(GL_TRIANGLE_STRIP, 4, GL_UNSIGNED_INT, (void*)0);
    check_for_opengl_errors();

    matDemo = viewMatrix;
    matDemo.Mult_glTranslate(-4, 1.3, -4.3);
    matDemo.Mult_glScale(.09, 1.3, .09);
    matDemo.DumpByColumns(matEntries);           // Apply the model view matrix
    glUniformMatrix4fv(modelviewMatLocation, 1, false, matEntries);
    glBindTexture(GL_TEXTURE_2D, TextureNames[2]);
    texCylinder.Render();
    check_for_opengl_errors();

    matDemo = viewMatrix;
    matDemo.Mult_glTranslate(-4, 0, -4.3);
    matDemo.Mult_glScale(.5, .05, .5);
    matDemo.DumpByColumns(matEntries);           // Apply the model view matrix
    glUniformMatrix4fv(modelviewMatLocation, 1, false, matEntries);
    glBindTexture(GL_TEXTURE_2D, TextureNames[2]);
    texCylinder.Render();
    check_for_opengl_errors();

    /**
    matDemo = viewMatrix;
    matDemo.Mult_glTranslate(-4.2, .5, -4.2);
    matDemo.Mult_glRotate(-.4, 1, 0 ,1);
    matDemo.Mult_glScale(.09, .4, .09);
    matDemo.DumpByColumns(matEntries);           // Apply the model view matrix
    glUniformMatrix4fv(modelviewMatLocation, 1, false, matEntries);
    texCylinder.Render();
    check_for_opengl_errors();

    matDemo = viewMatrix;
    matDemo.Mult_glTranslate(-4, .5, -4);
    matDemo.Mult_glRotate(.4, 1, 0, 1);
    matDemo.Mult_glScale(.09, .4, .09);
    matDemo.DumpByColumns(matEntries);           // Apply the model view matrix
    glUniformMatrix4fv(modelviewMatLocation, 1, false, matEntries);
    texCylinder.Render();
    check_for_opengl_errors();
    **/

    // Speaker 2
    matDemo = viewMatrix;
    matDemo.Mult_glTranslate(3.85, 2.5, -5);
    matDemo.Mult_glRotate(1.5708, 1, 0, 0);
    matDemo.Mult_glRotate(-0.523599, 0, 0, -1);
    matDemo.Mult_glScale(1, 1, 2);
    selectShaderProgram(shaderProgramBitmap);
    glBindVertexArray(myVAO[iCube]);                // Select the floor VAO (Vertex Array Object)
    materialUnderTexture.LoadIntoShaders();         // Use the bright underlying color
    matDemo.DumpByColumns(matEntries);           // Apply the model view matrix
    glUniformMatrix4fv(modelviewMatLocation, 1, false, matEntries);
    glUniform1i(applyTextureLocation, true);           // Enable applying the texture!
    glBindTexture(GL_TEXTURE_2D, TextureNames[2]);
    glDrawElements(GL_TRIANGLE_STRIP, 10, GL_UNSIGNED_INT, (void*)0);
    check_for_opengl_errors();

    matDemo2 = matDemo;
    matDemo2.Mult_glTranslate(0, 0, -1.0f);
    matDemo2.Mult_glRotate(3.14159, 0, 0, 1.0f);
    matDemo2.Mult_glTranslate(-1, 0, 0);
    selectShaderProgram(shaderProgramBitmap);
    glBindVertexArray(myVAO[iCubeTop]);                // Select the floor VAO (Vertex Array Object)
    materialUnderTexture.LoadIntoShaders();         // Use the bright underlying color
    matDemo2.DumpByColumns(matEntries);           // Apply the model view matrix
    glUniformMatrix4fv(modelviewMatLocation, 1, false, matEntries);
    glDrawElements(GL_TRIANGLE_STRIP, 4, GL_UNSIGNED_INT, (void*)0);
    check_for_opengl_errors();

    matDemo2.Mult_glTranslate(0, -1, 0);
    matDemo2.Mult_glRotate(3.14159, 0, 0, 1.0f);
    matDemo2.Mult_glTranslate(-1, 0, 0);
    matDemo2.Mult_glScale(1, 1, .5);
    selectShaderProgram(shaderProgramBitmap);
    glBindVertexArray(myVAO[iCubeTop]);                // Select the floor VAO (Vertex Array Object)
    materialUnderTexture.LoadIntoShaders();         // Use the bright underlying color
    matDemo2.DumpByColumns(matEntries);           // Apply the model view matrix
    glUniformMatrix4fv(modelviewMatLocation, 1, false, matEntries);
    glBindTexture(GL_TEXTURE_2D, TextureNames[3]);
    glDrawElements(GL_TRIANGLE_STRIP, 4, GL_UNSIGNED_INT, (void*)0);
    check_for_opengl_errors();

    matDemo2.Mult_glTranslate(0, 0, 1);
    selectShaderProgram(shaderProgramBitmap);
    glBindVertexArray(myVAO[iCubeTop]);                // Select the floor VAO (Vertex Array Object)
    materialUnderTexture.LoadIntoShaders();         // Use the bright underlying color
    matDemo2.DumpByColumns(matEntries);           // Apply the model view matrix
    glUniformMatrix4fv(modelviewMatLocation, 1, false, matEntries);
    glBindTexture(GL_TEXTURE_2D, TextureNames[6]);
    glDrawElements(GL_TRIANGLE_STRIP, 4, GL_UNSIGNED_INT, (void*)0);
    check_for_opengl_errors();

    matDemo = viewMatrix;
    matDemo.Mult_glTranslate(4, 1.3, -4.3);
    matDemo.Mult_glScale(.09, 1.3, .09);
    matDemo.DumpByColumns(matEntries);           // Apply the model view matrix
    glUniformMatrix4fv(modelviewMatLocation, 1, false, matEntries);
    glBindTexture(GL_TEXTURE_2D, TextureNames[2]);
    texCylinder.Render();
    check_for_opengl_errors();

    matDemo = viewMatrix;
    matDemo.Mult_glTranslate(4, 0, -4.3);
    matDemo.Mult_glScale(.5, .05, .5);
    matDemo.DumpByColumns(matEntries);           // Apply the model view matrix
    glUniformMatrix4fv(modelviewMatLocation, 1, false, matEntries);
    glBindTexture(GL_TEXTURE_2D, TextureNames[2]);
    texCylinder.Render();
    check_for_opengl_errors();



    // Render TV
    matDemo = viewMatrix;
    matDemo.Mult_glTranslate(-2, 2.3, -4.5);
    matDemo.Mult_glRotate(1.7, 1, 0, 0);
    matDemo.Mult_glScale(3.5, .2, 2.5);
    selectShaderProgram(shaderProgramBitmap);
    glBindVertexArray(myVAO[iCube]);                // Select the floor VAO (Vertex Array Object)
    materialUnderTexture.LoadIntoShaders();         // Use the bright underlying color
    matDemo.DumpByColumns(matEntries);           // Apply the model view matrix
    glUniformMatrix4fv(modelviewMatLocation, 1, false, matEntries);
    glUniform1i(applyTextureLocation, true);           // Enable applying the texture!
    glBindTexture(GL_TEXTURE_2D, TextureNames[2]);
    glDrawElements(GL_TRIANGLE_STRIP, 10, GL_UNSIGNED_INT, (void*)0);
    check_for_opengl_errors();

    matDemo2 = matDemo;
    matDemo2.Mult_glTranslate(0, 0, -1.0f);
    matDemo2.Mult_glRotate(3.14159, 0, 0, 1.0f);
    matDemo2.Mult_glTranslate(-1, 0, 0);
    selectShaderProgram(shaderProgramBitmap);
    glBindVertexArray(myVAO[iCubeTop]);                // Select the floor VAO (Vertex Array Object)
    materialUnderTexture.LoadIntoShaders();         // Use the bright underlying color
    matDemo2.DumpByColumns(matEntries);           // Apply the model view matrix
    glUniformMatrix4fv(modelviewMatLocation, 1, false, matEntries);
    glDrawElements(GL_TRIANGLE_STRIP, 4, GL_UNSIGNED_INT, (void*)0);
    check_for_opengl_errors();

    matDemo2.Mult_glTranslate(0, -1, 0);
    matDemo2.Mult_glRotate(3.14159, 0, 0, 1.0f);
    matDemo2.Mult_glTranslate(-1, 0, 0);
    selectShaderProgram(shaderProgramBitmap);
    glBindVertexArray(myVAO[iCubeTop]);                // Select the floor VAO (Vertex Array Object)
    materialUnderTexture.LoadIntoShaders();         // Use the bright underlying color
    matDemo2.DumpByColumns(matEntries);           // Apply the model view matrix
    glUniformMatrix4fv(modelviewMatLocation, 1, false, matEntries);
    glBindTexture(GL_TEXTURE_2D, TextureNames[channel]);
    glDrawElements(GL_TRIANGLE_STRIP, 4, GL_UNSIGNED_INT, (void*)0);
    check_for_opengl_errors();

    matDemo.Mult_glTranslate(.15,-.5, -.15);
    matDemo.Mult_glScale(.7, .5, .7);
    selectShaderProgram(shaderProgramBitmap);
    glBindVertexArray(myVAO[iCube]);                // Select the floor VAO (Vertex Array Object)
    materialUnderTexture.LoadIntoShaders();         // Use the bright underlying color
    matDemo.DumpByColumns(matEntries);           // Apply the model view matrix
    glUniformMatrix4fv(modelviewMatLocation, 1, false, matEntries);
    glUniform1i(applyTextureLocation, true);           // Enable applying the texture!
    glBindTexture(GL_TEXTURE_2D, TextureNames[2]);
    glDrawElements(GL_TRIANGLE_STRIP, 10, GL_UNSIGNED_INT, (void*)0);
    check_for_opengl_errors();

    matDemo2 = matDemo;
    matDemo2.Mult_glTranslate(0, 0, -1.0f);
    matDemo2.Mult_glRotate(3.14159, 0, 0, 1.0f);
    matDemo2.Mult_glTranslate(-1, 0, 0);
    selectShaderProgram(shaderProgramBitmap);
    glBindVertexArray(myVAO[iCubeTop]);                // Select the floor VAO (Vertex Array Object)
    materialUnderTexture.LoadIntoShaders();         // Use the bright underlying color
    matDemo2.DumpByColumns(matEntries);           // Apply the model view matrix
    glUniformMatrix4fv(modelviewMatLocation, 1, false, matEntries);
    glDrawElements(GL_TRIANGLE_STRIP, 4, GL_UNSIGNED_INT, (void*)0);
    check_for_opengl_errors();

    matDemo = viewMatrix;
    matDemo.Mult_glTranslate(-.3, 3.5, -4.5);
    matDemo.Mult_glRotate(-.4, 1, 0, 0);
    matDemo.Mult_glScale(.09, .4, .09);
    matDemo.DumpByColumns(matEntries);           // Apply the model view matrix
    glUniformMatrix4fv(modelviewMatLocation, 1, false, matEntries);
    texCylinder.Render();
    check_for_opengl_errors();

    matDemo = viewMatrix;
    matDemo.Mult_glTranslate(-.3, 3.5, -4.8);
    matDemo.Mult_glRotate(.4, 1, 0, 0);
    matDemo.Mult_glScale(.09, .4, .09);
    matDemo.DumpByColumns(matEntries);           // Apply the model view matrix
    glUniformMatrix4fv(modelviewMatLocation, 1, false, matEntries);
    texCylinder.Render();
    check_for_opengl_errors();


    // Render Coffee Table
    matDemo = viewMatrix;
    matDemo.Mult_glTranslate(-1, 1, -3);
    matDemo.Mult_glScale(1.5, .03, 1);
    matDemo.DumpByColumns(matEntries);           // Apply the model view matrix
    glUniformMatrix4fv(modelviewMatLocation, 1, false, matEntries);
    glUniform1i(applyTextureLocation, true);
    glBindTexture(GL_TEXTURE_2D, TextureNames[19]);
    texCylinder.Render();
    
    matDemo.Mult_glTranslate(0, -30, 0);
    matDemo.Mult_glScale(.7, 1, .7);
    matDemo.DumpByColumns(matEntries);           // Apply the model view matrix
    glUniformMatrix4fv(modelviewMatLocation, 1, false, matEntries);
    glBindTexture(GL_TEXTURE_2D, TextureNames[4]);
    texCylinder.Render();
    
    matDemo = viewMatrix;
    matDemo.Mult_glTranslate(-1, .5, -3);
    matDemo.Mult_glScale(.23, .42, .23);
    matDemo.DumpByColumns(matEntries);           // Apply the model view matrix
    glUniformMatrix4fv(modelviewMatLocation, 1, false, matEntries);
    glUniform1i(applyTextureLocation, true);
    texCylinder.Render();
    check_for_opengl_errors();
    glUniform1i(applyTextureLocation, false);

    
    // Render Cup
    matDemo = viewMatrix;
    matDemo.Mult_glTranslate(-1, 1.2, -3);
    matDemo.Mult_glScale(.15, .15, .15);
    matDemo.DumpByColumns(matEntries);           // Apply the model view matrix
    glUniformMatrix4fv(modelviewMatLocation, 1, false, matEntries);
    glUniform1i(applyTextureLocation, true);
    glBindTexture(GL_TEXTURE_2D, TextureNames[12]);
    texCylinder.RenderSide();
    texCylinder.RenderTop();

    matDemo.Mult_glTranslate(0, .02, 0);
    matDemo.Mult_glScale(.97, .97, .97);
    matDemo.Mult_glScale(-1,-1,-1);
    matDemo.DumpByColumns(matEntries);           // Apply the model view matrix
    glUniformMatrix4fv(modelviewMatLocation, 1, false, matEntries);
    texCylinder.RenderSide();
    glBindTexture(GL_TEXTURE_2D, TextureNames[0]);
    texCylinder.RenderBase();
    glUniform1i(applyTextureLocation, false);

    matDemo.Mult_glTranslate(0,-1,0);
    matDemo.Mult_glScale(.9, .01, .9);
    matDemo.DumpByColumns(matEntries);           // Apply the model view matrix
    glUniform1i(applyTextureLocation, true);
    glBindTexture(GL_TEXTURE_2D, TextureNames[12]);
    glUniformMatrix4fv(modelviewMatLocation, 1, false, matEntries);
    texTorus.Render();
    glUniform1i(applyTextureLocation, false);

    // Render Cabinet
    // Main Cabinet
    matDemo = viewMatrix;
    matDemo.Mult_glTranslate(3.75, .3, 1);
    matDemo.Mult_glRotate(1.5708, 1, 0, 0);
    matDemo.Mult_glRotate(1.5708, 0, 0, -1);
    matDemo.Mult_glScale(2.7, 1.2f, 3);
    selectShaderProgram(shaderProgramBitmap);
    glBindVertexArray(myVAO[iCube]);                // Select the floor VAO (Vertex Array Object)
    materialUnderTexture.LoadIntoShaders();         // Use the bright underlying color
    matDemo.DumpByColumns(matEntries);           // Apply the model view matrix
    glUniformMatrix4fv(modelviewMatLocation, 1, false, matEntries);
    glUniform1i(applyTextureLocation, true);           // Enable applying the texture!
    glBindTexture(GL_TEXTURE_2D, TextureNames[13]);
    glDrawElements(GL_TRIANGLE_STRIP, 10, GL_UNSIGNED_INT, (void*)0);
    check_for_opengl_errors();


    matDemo.Mult_glTranslate(0, 1, -1.0f);
    selectShaderProgram(shaderProgramBitmap);
    glBindVertexArray(myVAO[iCubeTop]);                // Select the floor VAO (Vertex Array Object)
    materialUnderTexture.LoadIntoShaders();         // Use the bright underlying color
    matDemo.DumpByColumns(matEntries);           // Apply the model view matrix
    glUniformMatrix4fv(modelviewMatLocation, 1, false, matEntries);
    glDrawElements(GL_TRIANGLE_STRIP, 4, GL_UNSIGNED_INT, (void*)0);
    check_for_opengl_errors();

    matDemo.Mult_glTranslate(0, -1, 0);
    matDemo.Mult_glRotate(3.14159, 0, 0, 1);
    matDemo.Mult_glTranslate(-1, 0, 0);
    selectShaderProgram(shaderProgramBitmap);
    glBindVertexArray(myVAO[iCubeTop]);                // Select the floor VAO (Vertex Array Object)
    materialUnderTexture.LoadIntoShaders();         // Use the bright underlying color
    matDemo.DumpByColumns(matEntries);           // Apply the model view matrix
    glPolygonOffset(1.0, 1.0);
    glBindTexture(GL_TEXTURE_2D, TextureNames[13]);
    glUniformMatrix4fv(modelviewMatLocation, 1, false, matEntries);
    glDrawElements(GL_TRIANGLE_STRIP, 4, GL_UNSIGNED_INT, (void*)0);
    check_for_opengl_errors();

    //Bottom Cabinet
    matDemo = viewMatrix;
    matDemo.Mult_glTranslate(3.6, 0, 1.12);
    matDemo.Mult_glScale(1.35, .3, 2.9);
    selectShaderProgram(shaderProgramBitmap);
    glBindVertexArray(myVAO[iCube]);                // Select the floor VAO (Vertex Array Object)
    materialUnderTexture.LoadIntoShaders();         // Use the bright underlying color
    matDemo.DumpByColumns(matEntries);           // Apply the model view matrix
    glUniformMatrix4fv(modelviewMatLocation, 1, false, matEntries);
    glUniform1i(applyTextureLocation, true);           // Enable applying the texture!
    glDrawElements(GL_TRIANGLE_STRIP, 10, GL_UNSIGNED_INT, (void*)0);
    check_for_opengl_errors();

    matDemo.Mult_glTranslate(0, 1, -1.0f);
    selectShaderProgram(shaderProgramBitmap);
    glBindVertexArray(myVAO[iCubeTop]);                // Select the floor VAO (Vertex Array Object)
    materialUnderTexture.LoadIntoShaders();         // Use the bright underlying color
    matDemo.DumpByColumns(matEntries);           // Apply the model view matrix
    glUniformMatrix4fv(modelviewMatLocation, 1, false, matEntries);
    glDrawElements(GL_TRIANGLE_STRIP, 4, GL_UNSIGNED_INT, (void*)0);
    check_for_opengl_errors();

    matDemo.Mult_glTranslate(0, -1, 0);
    matDemo.Mult_glRotate(3.14159, 0, 0, 1);
    matDemo.Mult_glTranslate(-1, 0, 0);
    selectShaderProgram(shaderProgramBitmap);
    glBindVertexArray(myVAO[iCubeTop]);                // Select the floor VAO (Vertex Array Object)
    materialUnderTexture.LoadIntoShaders();         // Use the bright underlying color
    matDemo.DumpByColumns(matEntries);           // Apply the model view matrix
    glUniformMatrix4fv(modelviewMatLocation, 1, false, matEntries);
    glDrawElements(GL_TRIANGLE_STRIP, 4, GL_UNSIGNED_INT, (void*)0);
    check_for_opengl_errors();

    //Top Cabinet
    matDemo = viewMatrix;
    matDemo.Mult_glTranslate(3.6, 3.3, 1.12);
    matDemo.Mult_glScale(1.35, .1, 2.9);
    selectShaderProgram(shaderProgramBitmap);
    glBindVertexArray(myVAO[iCube]);                // Select the floor VAO (Vertex Array Object)
    materialUnderTexture.LoadIntoShaders();         // Use the bright underlying color
    matDemo.DumpByColumns(matEntries);           // Apply the model view matrix
    glUniformMatrix4fv(modelviewMatLocation, 1, false, matEntries);
    glDrawElements(GL_TRIANGLE_STRIP, 10, GL_UNSIGNED_INT, (void*)0);
    check_for_opengl_errors();

    matDemo.Mult_glTranslate(0, 1, -1.0f);
    selectShaderProgram(shaderProgramBitmap);
    glBindVertexArray(myVAO[iCubeTop]);                // Select the floor VAO (Vertex Array Object)
    materialUnderTexture.LoadIntoShaders();         // Use the bright underlying color
    matDemo.DumpByColumns(matEntries);           // Apply the model view matrix
    glUniformMatrix4fv(modelviewMatLocation, 1, false, matEntries);
    glDrawElements(GL_TRIANGLE_STRIP, 4, GL_UNSIGNED_INT, (void*)0);
    check_for_opengl_errors();

    matDemo.Mult_glTranslate(0, -1, 0);
    matDemo.Mult_glRotate(3.14159, 0, 0, 1);
    matDemo.Mult_glTranslate(-1, 0, 0);
    selectShaderProgram(shaderProgramBitmap);
    glBindVertexArray(myVAO[iCubeTop]);                // Select the floor VAO (Vertex Array Object)
    materialUnderTexture.LoadIntoShaders();         // Use the bright underlying color
    matDemo.DumpByColumns(matEntries);           // Apply the model view matrix
    glUniformMatrix4fv(modelviewMatLocation, 1, false, matEntries);
    glDrawElements(GL_TRIANGLE_STRIP, 4, GL_UNSIGNED_INT, (void*)0);
    check_for_opengl_errors();

    //Door

    matDemo = viewMatrix;
    matDemo.Mult_glTranslate(3.65, .3, .90);
    matDemo.Mult_glRotate(1.5708, 1, 0, 0);
    matDemo.Mult_glRotate(1.5708, 0, 0, -1);
    matDemo.Mult_glScale(1.3, .1, 3);
    selectShaderProgram(shaderProgramBitmap);
    glBindVertexArray(myVAO[iCube]);                // Select the floor VAO (Vertex Array Object)
    materialUnderTexture.LoadIntoShaders();         // Use the bright underlying color
    matDemo.DumpByColumns(matEntries);           // Apply the model view matrix
    glUniformMatrix4fv(modelviewMatLocation, 1, false, matEntries);
    glUniform1i(applyTextureLocation, true);           // Enable applying the texture!
    glBindTexture(GL_TEXTURE_2D, TextureNames[13]);
    glDrawElements(GL_TRIANGLE_STRIP, 10, GL_UNSIGNED_INT, (void*)0);
    check_for_opengl_errors();


    matDemo.Mult_glTranslate(0, 1, -1.0f);
    selectShaderProgram(shaderProgramBitmap);
    glBindVertexArray(myVAO[iCubeTop]);                // Select the floor VAO (Vertex Array Object)
    materialUnderTexture.LoadIntoShaders();         // Use the bright underlying color
    matDemo.DumpByColumns(matEntries);           // Apply the model view matrix
    glUniformMatrix4fv(modelviewMatLocation, 1, false, matEntries);
    glDrawElements(GL_TRIANGLE_STRIP, 4, GL_UNSIGNED_INT, (void*)0);
    check_for_opengl_errors();


    matDemo.Mult_glTranslate(0, -1, 0);
    matDemo.Mult_glRotate(3.14159, 0, 0, 1);
    matDemo.Mult_glTranslate(-1, 0, 0);
    selectShaderProgram(shaderProgramBitmap);
    glBindVertexArray(myVAO[iCubeTop]);                // Select the floor VAO (Vertex Array Object)
    materialUnderTexture.LoadIntoShaders();         // Use the bright underlying color
    matDemo.DumpByColumns(matEntries);           // Apply the model view matrix
    glUniformMatrix4fv(modelviewMatLocation, 1, false, matEntries);
    glDrawElements(GL_TRIANGLE_STRIP, 4, GL_UNSIGNED_INT, (void*)0);
    check_for_opengl_errors();

    selectShaderProgram(shaderProgramBitmap);
    glBindVertexArray(myVAO[iCubeTop]);                // Select the floor VAO (Vertex Array Object)
    materialUnderTexture.LoadIntoShaders();         // Use the bright underlying color
    matDemo.DumpByColumns(matEntries);         
    glBindTexture(GL_TEXTURE_2D, TextureNames[24]);// Apply the model view matrix
    glUniformMatrix4fv(modelviewMatLocation, 1, false, matEntries);
    glDrawElements(GL_TRIANGLE_STRIP, 4, GL_UNSIGNED_INT, (void*)0);
    check_for_opengl_errors();

    matDemo.Mult_glTranslate(-1, -1, 0);
    selectShaderProgram(shaderProgramBitmap);
    glBindVertexArray(myVAO[iCubeTop]);                // Select the floor VAO (Vertex Array Object)
    materialUnderTexture.LoadIntoShaders();         // Use the bright underlying color
    matDemo.DumpByColumns(matEntries);
    glPolygonOffset(-1.0, -1.0);
    glBindTexture(GL_TEXTURE_2D, TextureNames[23]);// Apply the model view matrix
    glUniformMatrix4fv(modelviewMatLocation, 1, false, matEntries);
    glDrawElements(GL_TRIANGLE_STRIP, 4, GL_UNSIGNED_INT, (void*)0);
    check_for_opengl_errors();


    // Render Roomba
    matDemo = viewMatrix;
    matDemo.Mult_glTranslate(-1, .15, 2);
    matDemo.Mult_glScale(.4, .09, .4);
    matDemo.Mult_glTranslate(turn_go, 0, forward_go);
    matDemo.Mult_glRotate(turn_agle,0,1,0);
    matDemo.DumpByColumns(matEntries);           // Apply the model view matrix
    glUniformMatrix4fv(modelviewMatLocation, 1, false, matEntries);
    glUniform1i(applyTextureLocation, true);
    glBindTexture(GL_TEXTURE_2D, TextureNames[14]);
    texCylinder.RenderBase();
    glBindTexture(GL_TEXTURE_2D, TextureNames[2]);
    texCylinder.RenderSide();
    texCylinder.RenderTop();

    matDemo2 = matDemo;
    matDemo2.Mult_glTranslate(-.5, -1, -.5);
    matDemo2.Mult_glScale(.1, .8, .1);
    matDemo2.DumpByColumns(matEntries);           // Apply the model view matrix
    glUniformMatrix4fv(modelviewMatLocation, 1, false, matEntries);
    texSphere.Render();

    matDemo2 = matDemo;
    matDemo2.Mult_glTranslate(.5, -1, -.5);
    matDemo2.Mult_glScale(.1, .8, .1);
    matDemo2.DumpByColumns(matEntries);           // Apply the model view matrix
    glUniformMatrix4fv(modelviewMatLocation, 1, false, matEntries);
    texSphere.Render();

    matDemo2 = matDemo;
    matDemo2.Mult_glTranslate(-.5, -1, .5);
    matDemo2.Mult_glScale(.1, .8, .1);
    matDemo2.DumpByColumns(matEntries);           // Apply the model view matrix
    glUniformMatrix4fv(modelviewMatLocation, 1, false, matEntries);
    texSphere.Render();

    matDemo2 = matDemo;
    matDemo2.Mult_glTranslate(.5, -1, .5);
    matDemo2.Mult_glScale(.1, .8, .1);
    matDemo2.DumpByColumns(matEntries);           // Apply the model view matrix
    glUniformMatrix4fv(modelviewMatLocation, 1, false, matEntries);
    texSphere.Render();



    //Render Desk Cabinet
    //Cabinet 1
    matDemo = viewMatrix;
    matDemo.Mult_glTranslate(-4, 0.2f, 4);
    matDemo.Mult_glRotate(1.5708, 1, 0, 0);
    matDemo.Mult_glScale(1.5, 1, .4);
    selectShaderProgram(shaderProgramBitmap);
    glBindVertexArray(myVAO[iCube]);                // Select the floor VAO (Vertex Array Object)
    materialUnderTexture.LoadIntoShaders();         // Use the bright underlying color
    matDemo.DumpByColumns(matEntries);           // Apply the model view matrix
    glUniformMatrix4fv(modelviewMatLocation, 1, false, matEntries);
    glUniform1i(applyTextureLocation, true);           // Enable applying the texture!
    glBindTexture(GL_TEXTURE_2D, TextureNames[13]);
    glDrawElements(GL_TRIANGLE_STRIP, 10, GL_UNSIGNED_INT, (void*)0);
    check_for_opengl_errors();


    matDemo.Mult_glTranslate(0, 1, -1.0f);
    selectShaderProgram(shaderProgramBitmap);
    glBindVertexArray(myVAO[iCubeTop]);                // Select the floor VAO (Vertex Array Object)
    materialUnderTexture.LoadIntoShaders();         // Use the bright underlying color
    matDemo.DumpByColumns(matEntries);           // Apply the model view matrix
    glUniformMatrix4fv(modelviewMatLocation, 1, false, matEntries);
    glDrawElements(GL_TRIANGLE_STRIP, 4, GL_UNSIGNED_INT, (void*)0);
    check_for_opengl_errors();

    matDemo.Mult_glTranslate(0, -1, 0);
    matDemo.Mult_glRotate(3.14159, 0, 0, 1);
    matDemo.Mult_glTranslate(-1, 0, 0);
    selectShaderProgram(shaderProgramBitmap);
    glBindVertexArray(myVAO[iCubeTop]);                // Select the floor VAO (Vertex Array Object)
    materialUnderTexture.LoadIntoShaders();         // Use the bright underlying color
    matDemo.DumpByColumns(matEntries);           // Apply the model view matrix
    glUniformMatrix4fv(modelviewMatLocation, 1, false, matEntries);
    glDrawElements(GL_TRIANGLE_STRIP, 4, GL_UNSIGNED_INT, (void*)0);
    check_for_opengl_errors();

    matDemo.Mult_glTranslate(.4, .05, .5);
    matDemo.Mult_glScale(.2, .05, .1);
    selectShaderProgram(shaderProgramBitmap);
    glBindVertexArray(myVAO[iCube]);                // Select the floor VAO (Vertex Array Object)
    materialUnderTexture.LoadIntoShaders();         // Use the bright underlying color
    matDemo.DumpByColumns(matEntries);           // Apply the model view matrix
    glUniformMatrix4fv(modelviewMatLocation, 1, false, matEntries);
    glUniform1i(applyTextureLocation, true);           // Enable applying the texture!
    glBindTexture(GL_TEXTURE_2D, TextureNames[18]);
    glDrawElements(GL_TRIANGLE_STRIP, 10, GL_UNSIGNED_INT, (void*)0);
    check_for_opengl_errors();


    matDemo.Mult_glTranslate(0, 1, -1.0f);
    selectShaderProgram(shaderProgramBitmap);
    glBindVertexArray(myVAO[iCubeTop]);                // Select the floor VAO (Vertex Array Object)
    materialUnderTexture.LoadIntoShaders();         // Use the bright underlying color
    matDemo.DumpByColumns(matEntries);           // Apply the model view matrix
    glUniformMatrix4fv(modelviewMatLocation, 1, false, matEntries);
    glDrawElements(GL_TRIANGLE_STRIP, 4, GL_UNSIGNED_INT, (void*)0);
    check_for_opengl_errors();

    matDemo.Mult_glTranslate(0, -1, 0);
    matDemo.Mult_glRotate(3.14159, 0, 0, 1);
    matDemo.Mult_glTranslate(-1, 0, 0);
    selectShaderProgram(shaderProgramBitmap);
    glBindVertexArray(myVAO[iCubeTop]);                // Select the floor VAO (Vertex Array Object)
    materialUnderTexture.LoadIntoShaders();         // Use the bright underlying color
    matDemo.DumpByColumns(matEntries);           // Apply the model view matrix
    glUniformMatrix4fv(modelviewMatLocation, 1, false, matEntries);
    glDrawElements(GL_TRIANGLE_STRIP, 4, GL_UNSIGNED_INT, (void*)0);
    check_for_opengl_errors();

    //Cabinet 2
    matDemo = viewMatrix;
    matDemo.Mult_glTranslate(-2.48, 0.2f, 4);
    matDemo.Mult_glRotate(1.5708, 1, 0, 0);
    matDemo.Mult_glScale(1.5, 1, .4);
    selectShaderProgram(shaderProgramBitmap);
    glBindVertexArray(myVAO[iCube]);                // Select the floor VAO (Vertex Array Object)
    materialUnderTexture.LoadIntoShaders();         // Use the bright underlying color
    matDemo.DumpByColumns(matEntries);           // Apply the model view matrix
    glUniformMatrix4fv(modelviewMatLocation, 1, false, matEntries);
    glUniform1i(applyTextureLocation, true);           // Enable applying the texture!
    glBindTexture(GL_TEXTURE_2D, TextureNames[13]);
    glDrawElements(GL_TRIANGLE_STRIP, 10, GL_UNSIGNED_INT, (void*)0);
    check_for_opengl_errors();


    matDemo.Mult_glTranslate(0, 1, -1.0f);
    selectShaderProgram(shaderProgramBitmap);
    glBindVertexArray(myVAO[iCubeTop]);                // Select the floor VAO (Vertex Array Object)
    materialUnderTexture.LoadIntoShaders();         // Use the bright underlying color
    matDemo.DumpByColumns(matEntries);           // Apply the model view matrix
    glUniformMatrix4fv(modelviewMatLocation, 1, false, matEntries);
    glDrawElements(GL_TRIANGLE_STRIP, 4, GL_UNSIGNED_INT, (void*)0);
    check_for_opengl_errors();

    matDemo.Mult_glTranslate(0, -1, 0);
    matDemo.Mult_glRotate(3.14159, 0, 0, 1);
    matDemo.Mult_glTranslate(-1, 0, 0);
    selectShaderProgram(shaderProgramBitmap);
    glBindVertexArray(myVAO[iCubeTop]);                // Select the floor VAO (Vertex Array Object)
    materialUnderTexture.LoadIntoShaders();         // Use the bright underlying color
    matDemo.DumpByColumns(matEntries);           // Apply the model view matrix
    glUniformMatrix4fv(modelviewMatLocation, 1, false, matEntries);
    glDrawElements(GL_TRIANGLE_STRIP, 4, GL_UNSIGNED_INT, (void*)0);
    check_for_opengl_errors();

    matDemo.Mult_glTranslate(.4, .05, .5);
    matDemo.Mult_glScale(.2, .05, .1);
    selectShaderProgram(shaderProgramBitmap);
    glBindVertexArray(myVAO[iCube]);                // Select the floor VAO (Vertex Array Object)
    materialUnderTexture.LoadIntoShaders();         // Use the bright underlying color
    matDemo.DumpByColumns(matEntries);           // Apply the model view matrix
    glUniformMatrix4fv(modelviewMatLocation, 1, false, matEntries);
    glUniform1i(applyTextureLocation, true);           // Enable applying the texture!
    glBindTexture(GL_TEXTURE_2D, TextureNames[18]);
    glDrawElements(GL_TRIANGLE_STRIP, 10, GL_UNSIGNED_INT, (void*)0);
    check_for_opengl_errors();


    matDemo.Mult_glTranslate(0, 1, -1.0f);
    selectShaderProgram(shaderProgramBitmap);
    glBindVertexArray(myVAO[iCubeTop]);                // Select the floor VAO (Vertex Array Object)
    materialUnderTexture.LoadIntoShaders();         // Use the bright underlying color
    matDemo.DumpByColumns(matEntries);           // Apply the model view matrix
    glUniformMatrix4fv(modelviewMatLocation, 1, false, matEntries);
    glDrawElements(GL_TRIANGLE_STRIP, 4, GL_UNSIGNED_INT, (void*)0);
    check_for_opengl_errors();

    matDemo.Mult_glTranslate(0, -1, 0);
    matDemo.Mult_glRotate(3.14159, 0, 0, 1);
    matDemo.Mult_glTranslate(-1, 0, 0);
    selectShaderProgram(shaderProgramBitmap);
    glBindVertexArray(myVAO[iCubeTop]);                // Select the floor VAO (Vertex Array Object)
    materialUnderTexture.LoadIntoShaders();         // Use the bright underlying color
    matDemo.DumpByColumns(matEntries);           // Apply the model view matrix
    glUniformMatrix4fv(modelviewMatLocation, 1, false, matEntries);
    glDrawElements(GL_TRIANGLE_STRIP, 4, GL_UNSIGNED_INT, (void*)0);
    check_for_opengl_errors();



    //Cabinet 3
    matDemo = viewMatrix;
    matDemo.Mult_glTranslate(-0.96, 0.2f, 4);
    matDemo.Mult_glRotate(1.5708, 1, 0, 0);
    matDemo.Mult_glScale(1.5, 1, .4);
    selectShaderProgram(shaderProgramBitmap);
    glBindVertexArray(myVAO[iCube]);                // Select the floor VAO (Vertex Array Object)
    materialUnderTexture.LoadIntoShaders();         // Use the bright underlying color
    matDemo.DumpByColumns(matEntries);           // Apply the model view matrix
    glUniformMatrix4fv(modelviewMatLocation, 1, false, matEntries);
    glUniform1i(applyTextureLocation, true);           // Enable applying the texture!
    glBindTexture(GL_TEXTURE_2D, TextureNames[13]);
    glDrawElements(GL_TRIANGLE_STRIP, 10, GL_UNSIGNED_INT, (void*)0);
    check_for_opengl_errors();


    matDemo.Mult_glTranslate(0, 1, -1.0f);
    selectShaderProgram(shaderProgramBitmap);
    glBindVertexArray(myVAO[iCubeTop]);                // Select the floor VAO (Vertex Array Object)
    materialUnderTexture.LoadIntoShaders();         // Use the bright underlying color
    matDemo.DumpByColumns(matEntries);           // Apply the model view matrix
    glUniformMatrix4fv(modelviewMatLocation, 1, false, matEntries);
    glDrawElements(GL_TRIANGLE_STRIP, 4, GL_UNSIGNED_INT, (void*)0);
    check_for_opengl_errors();

    matDemo.Mult_glTranslate(0, -1, 0);
    matDemo.Mult_glRotate(3.14159, 0, 0, 1);
    matDemo.Mult_glTranslate(-1, 0, 0);
    selectShaderProgram(shaderProgramBitmap);
    glBindVertexArray(myVAO[iCubeTop]);                // Select the floor VAO (Vertex Array Object)
    materialUnderTexture.LoadIntoShaders();         // Use the bright underlying color
    matDemo.DumpByColumns(matEntries);           // Apply the model view matrix
    glUniformMatrix4fv(modelviewMatLocation, 1, false, matEntries);
    glDrawElements(GL_TRIANGLE_STRIP, 4, GL_UNSIGNED_INT, (void*)0);
    check_for_opengl_errors();

    matDemo.Mult_glTranslate(.4, .05, .5);
    matDemo.Mult_glScale(.2, .05, .1);
    selectShaderProgram(shaderProgramBitmap);
    glBindVertexArray(myVAO[iCube]);                // Select the floor VAO (Vertex Array Object)
    materialUnderTexture.LoadIntoShaders();         // Use the bright underlying color
    matDemo.DumpByColumns(matEntries);           // Apply the model view matrix
    glUniformMatrix4fv(modelviewMatLocation, 1, false, matEntries);
    glUniform1i(applyTextureLocation, true);           // Enable applying the texture!
    glBindTexture(GL_TEXTURE_2D, TextureNames[18]);
    glDrawElements(GL_TRIANGLE_STRIP, 10, GL_UNSIGNED_INT, (void*)0);
    check_for_opengl_errors();


    matDemo.Mult_glTranslate(0, 1, -1.0f);
    selectShaderProgram(shaderProgramBitmap);
    glBindVertexArray(myVAO[iCubeTop]);                // Select the floor VAO (Vertex Array Object)
    materialUnderTexture.LoadIntoShaders();         // Use the bright underlying color
    matDemo.DumpByColumns(matEntries);           // Apply the model view matrix
    glUniformMatrix4fv(modelviewMatLocation, 1, false, matEntries);
    glDrawElements(GL_TRIANGLE_STRIP, 4, GL_UNSIGNED_INT, (void*)0);
    check_for_opengl_errors();

    matDemo.Mult_glTranslate(0, -1, 0);
    matDemo.Mult_glRotate(3.14159, 0, 0, 1);
    matDemo.Mult_glTranslate(-1, 0, 0);
    selectShaderProgram(shaderProgramBitmap);
    glBindVertexArray(myVAO[iCubeTop]);                // Select the floor VAO (Vertex Array Object)
    materialUnderTexture.LoadIntoShaders();         // Use the bright underlying color
    matDemo.DumpByColumns(matEntries);           // Apply the model view matrix
    glUniformMatrix4fv(modelviewMatLocation, 1, false, matEntries);
    glDrawElements(GL_TRIANGLE_STRIP, 4, GL_UNSIGNED_INT, (void*)0);
    check_for_opengl_errors();

    //Cabinet 4
    matDemo = viewMatrix;
    matDemo.Mult_glTranslate(0.56, 0.2f, 4);
    matDemo.Mult_glRotate(1.5708, 1, 0, 0);
    matDemo.Mult_glScale(1.5, 1, .4);
    selectShaderProgram(shaderProgramBitmap);
    glBindVertexArray(myVAO[iCube]);                // Select the floor VAO (Vertex Array Object)
    materialUnderTexture.LoadIntoShaders();         // Use the bright underlying color
    matDemo.DumpByColumns(matEntries);           // Apply the model view matrix
    glUniformMatrix4fv(modelviewMatLocation, 1, false, matEntries);
    glUniform1i(applyTextureLocation, true);           // Enable applying the texture!
    glBindTexture(GL_TEXTURE_2D, TextureNames[13]);
    glDrawElements(GL_TRIANGLE_STRIP, 10, GL_UNSIGNED_INT, (void*)0);
    check_for_opengl_errors();


    matDemo.Mult_glTranslate(0, 1, -1.0f);
    selectShaderProgram(shaderProgramBitmap);
    glBindVertexArray(myVAO[iCubeTop]);                // Select the floor VAO (Vertex Array Object)
    materialUnderTexture.LoadIntoShaders();         // Use the bright underlying color
    matDemo.DumpByColumns(matEntries);           // Apply the model view matrix
    glUniformMatrix4fv(modelviewMatLocation, 1, false, matEntries);
    glDrawElements(GL_TRIANGLE_STRIP, 4, GL_UNSIGNED_INT, (void*)0);
    check_for_opengl_errors();

    matDemo.Mult_glTranslate(0, -1, 0);
    matDemo.Mult_glRotate(3.14159, 0, 0, 1);
    matDemo.Mult_glTranslate(-1, 0, 0);
    selectShaderProgram(shaderProgramBitmap);
    glBindVertexArray(myVAO[iCubeTop]);                // Select the floor VAO (Vertex Array Object)
    materialUnderTexture.LoadIntoShaders();         // Use the bright underlying color
    matDemo.DumpByColumns(matEntries);           // Apply the model view matrix
    glUniformMatrix4fv(modelviewMatLocation, 1, false, matEntries);
    glDrawElements(GL_TRIANGLE_STRIP, 4, GL_UNSIGNED_INT, (void*)0);
    check_for_opengl_errors();

    matDemo.Mult_glTranslate(.4, .05, .5);
    matDemo.Mult_glScale(.2, .05, .1);
    selectShaderProgram(shaderProgramBitmap);
    glBindVertexArray(myVAO[iCube]);                // Select the floor VAO (Vertex Array Object)
    materialUnderTexture.LoadIntoShaders();         // Use the bright underlying color
    matDemo.DumpByColumns(matEntries);           // Apply the model view matrix
    glUniformMatrix4fv(modelviewMatLocation, 1, false, matEntries);
    glUniform1i(applyTextureLocation, true);           // Enable applying the texture!
    glBindTexture(GL_TEXTURE_2D, TextureNames[18]);
    glDrawElements(GL_TRIANGLE_STRIP, 10, GL_UNSIGNED_INT, (void*)0);
    check_for_opengl_errors();


    matDemo.Mult_glTranslate(0, 1, -1.0f);
    selectShaderProgram(shaderProgramBitmap);
    glBindVertexArray(myVAO[iCubeTop]);                // Select the floor VAO (Vertex Array Object)
    materialUnderTexture.LoadIntoShaders();         // Use the bright underlying color
    matDemo.DumpByColumns(matEntries);           // Apply the model view matrix
    glUniformMatrix4fv(modelviewMatLocation, 1, false, matEntries);
    glDrawElements(GL_TRIANGLE_STRIP, 4, GL_UNSIGNED_INT, (void*)0);
    check_for_opengl_errors();

    matDemo.Mult_glTranslate(0, -1, 0);
    matDemo.Mult_glRotate(3.14159, 0, 0, 1);
    matDemo.Mult_glTranslate(-1, 0, 0);
    selectShaderProgram(shaderProgramBitmap);
    glBindVertexArray(myVAO[iCubeTop]);                // Select the floor VAO (Vertex Array Object)
    materialUnderTexture.LoadIntoShaders();         // Use the bright underlying color
    matDemo.DumpByColumns(matEntries);           // Apply the model view matrix
    glUniformMatrix4fv(modelviewMatLocation, 1, false, matEntries);
    glDrawElements(GL_TRIANGLE_STRIP, 4, GL_UNSIGNED_INT, (void*)0);
    check_for_opengl_errors();

    //Cabinet 5
    matDemo = viewMatrix;
    matDemo.Mult_glTranslate(0.56, 0.62f, 4);
    matDemo.Mult_glRotate(1.5708, 1, 0, 0);
    matDemo.Mult_glScale(1.5, 1, .4);
    selectShaderProgram(shaderProgramBitmap);
    glBindVertexArray(myVAO[iCube]);                // Select the floor VAO (Vertex Array Object)
    materialUnderTexture.LoadIntoShaders();         // Use the bright underlying color
    matDemo.DumpByColumns(matEntries);           // Apply the model view matrix
    glUniformMatrix4fv(modelviewMatLocation, 1, false, matEntries);
    glUniform1i(applyTextureLocation, true);           // Enable applying the texture!
    glBindTexture(GL_TEXTURE_2D, TextureNames[13]);
    glDrawElements(GL_TRIANGLE_STRIP, 10, GL_UNSIGNED_INT, (void*)0);
    check_for_opengl_errors();


    matDemo.Mult_glTranslate(0, 1, -1.0f);
    selectShaderProgram(shaderProgramBitmap);
    glBindVertexArray(myVAO[iCubeTop]);                // Select the floor VAO (Vertex Array Object)
    materialUnderTexture.LoadIntoShaders();         // Use the bright underlying color
    matDemo.DumpByColumns(matEntries);           // Apply the model view matrix
    glUniformMatrix4fv(modelviewMatLocation, 1, false, matEntries);
    glDrawElements(GL_TRIANGLE_STRIP, 4, GL_UNSIGNED_INT, (void*)0);
    check_for_opengl_errors();

    matDemo.Mult_glTranslate(0, -1, 0);
    matDemo.Mult_glRotate(3.14159, 0, 0, 1);
    matDemo.Mult_glTranslate(-1, 0, 0);
    selectShaderProgram(shaderProgramBitmap);
    glBindVertexArray(myVAO[iCubeTop]);                // Select the floor VAO (Vertex Array Object)
    materialUnderTexture.LoadIntoShaders();         // Use the bright underlying color
    matDemo.DumpByColumns(matEntries);           // Apply the model view matrix
    glUniformMatrix4fv(modelviewMatLocation, 1, false, matEntries);
    glDrawElements(GL_TRIANGLE_STRIP, 4, GL_UNSIGNED_INT, (void*)0);
    check_for_opengl_errors();

    matDemo.Mult_glTranslate(.4, .05, .5);
    matDemo.Mult_glScale(.2, .05, .1);
    selectShaderProgram(shaderProgramBitmap);
    glBindVertexArray(myVAO[iCube]);                // Select the floor VAO (Vertex Array Object)
    materialUnderTexture.LoadIntoShaders();         // Use the bright underlying color
    matDemo.DumpByColumns(matEntries);           // Apply the model view matrix
    glUniformMatrix4fv(modelviewMatLocation, 1, false, matEntries);
    glUniform1i(applyTextureLocation, true);           // Enable applying the texture!
    glBindTexture(GL_TEXTURE_2D, TextureNames[18]);
    glDrawElements(GL_TRIANGLE_STRIP, 10, GL_UNSIGNED_INT, (void*)0);
    check_for_opengl_errors();


    matDemo.Mult_glTranslate(0, 1, -1.0f);
    selectShaderProgram(shaderProgramBitmap);
    glBindVertexArray(myVAO[iCubeTop]);                // Select the floor VAO (Vertex Array Object)
    materialUnderTexture.LoadIntoShaders();         // Use the bright underlying color
    matDemo.DumpByColumns(matEntries);           // Apply the model view matrix
    glUniformMatrix4fv(modelviewMatLocation, 1, false, matEntries);
    glDrawElements(GL_TRIANGLE_STRIP, 4, GL_UNSIGNED_INT, (void*)0);
    check_for_opengl_errors();

    matDemo.Mult_glTranslate(0, -1, 0);
    matDemo.Mult_glRotate(3.14159, 0, 0, 1);
    matDemo.Mult_glTranslate(-1, 0, 0);
    selectShaderProgram(shaderProgramBitmap);
    glBindVertexArray(myVAO[iCubeTop]);                // Select the floor VAO (Vertex Array Object)
    materialUnderTexture.LoadIntoShaders();         // Use the bright underlying color
    matDemo.DumpByColumns(matEntries);           // Apply the model view matrix
    glUniformMatrix4fv(modelviewMatLocation, 1, false, matEntries);
    glDrawElements(GL_TRIANGLE_STRIP, 4, GL_UNSIGNED_INT, (void*)0);
    check_for_opengl_errors();

    //Cabinet 6
    matDemo = viewMatrix;
    matDemo.Mult_glTranslate(2.08, 0.62f, 4);
    matDemo.Mult_glRotate(1.5708, 1, 0, 0);
    matDemo.Mult_glScale(1.5, 1, .4);
    selectShaderProgram(shaderProgramBitmap);
    glBindVertexArray(myVAO[iCube]);                // Select the floor VAO (Vertex Array Object)
    materialUnderTexture.LoadIntoShaders();         // Use the bright underlying color
    matDemo.DumpByColumns(matEntries);           // Apply the model view matrix
    glUniformMatrix4fv(modelviewMatLocation, 1, false, matEntries);
    glUniform1i(applyTextureLocation, true);           // Enable applying the texture!
    glBindTexture(GL_TEXTURE_2D, TextureNames[13]);
    glDrawElements(GL_TRIANGLE_STRIP, 10, GL_UNSIGNED_INT, (void*)0);
    check_for_opengl_errors();


    matDemo.Mult_glTranslate(0, 1, -1.0f);
    selectShaderProgram(shaderProgramBitmap);
    glBindVertexArray(myVAO[iCubeTop]);                // Select the floor VAO (Vertex Array Object)
    materialUnderTexture.LoadIntoShaders();         // Use the bright underlying color
    matDemo.DumpByColumns(matEntries);           // Apply the model view matrix
    glUniformMatrix4fv(modelviewMatLocation, 1, false, matEntries);
    glDrawElements(GL_TRIANGLE_STRIP, 4, GL_UNSIGNED_INT, (void*)0);
    check_for_opengl_errors();

    matDemo.Mult_glTranslate(0, -1, 0);
    matDemo.Mult_glRotate(3.14159, 0, 0, 1);
    matDemo.Mult_glTranslate(-1, 0, 0);
    selectShaderProgram(shaderProgramBitmap);
    glBindVertexArray(myVAO[iCubeTop]);                // Select the floor VAO (Vertex Array Object)
    materialUnderTexture.LoadIntoShaders();         // Use the bright underlying color
    matDemo.DumpByColumns(matEntries);           // Apply the model view matrix
    glUniformMatrix4fv(modelviewMatLocation, 1, false, matEntries);
    glDrawElements(GL_TRIANGLE_STRIP, 4, GL_UNSIGNED_INT, (void*)0);
    check_for_opengl_errors();

    matDemo.Mult_glTranslate(.4, .05, .5);
    matDemo.Mult_glScale(.2, .05, .1);
    selectShaderProgram(shaderProgramBitmap);
    glBindVertexArray(myVAO[iCube]);                // Select the floor VAO (Vertex Array Object)
    materialUnderTexture.LoadIntoShaders();         // Use the bright underlying color
    matDemo.DumpByColumns(matEntries);           // Apply the model view matrix
    glUniformMatrix4fv(modelviewMatLocation, 1, false, matEntries);
    glUniform1i(applyTextureLocation, true);           // Enable applying the texture!
    glBindTexture(GL_TEXTURE_2D, TextureNames[18]);
    glDrawElements(GL_TRIANGLE_STRIP, 10, GL_UNSIGNED_INT, (void*)0);
    check_for_opengl_errors();


    matDemo.Mult_glTranslate(0, 1, -1.0f);
    selectShaderProgram(shaderProgramBitmap);
    glBindVertexArray(myVAO[iCubeTop]);                // Select the floor VAO (Vertex Array Object)
    materialUnderTexture.LoadIntoShaders();         // Use the bright underlying color
    matDemo.DumpByColumns(matEntries);           // Apply the model view matrix
    glUniformMatrix4fv(modelviewMatLocation, 1, false, matEntries);
    glDrawElements(GL_TRIANGLE_STRIP, 4, GL_UNSIGNED_INT, (void*)0);
    check_for_opengl_errors();

    matDemo.Mult_glTranslate(0, -1, 0);
    matDemo.Mult_glRotate(3.14159, 0, 0, 1);
    matDemo.Mult_glTranslate(-1, 0, 0);
    selectShaderProgram(shaderProgramBitmap);
    glBindVertexArray(myVAO[iCubeTop]);                // Select the floor VAO (Vertex Array Object)
    materialUnderTexture.LoadIntoShaders();         // Use the bright underlying color
    matDemo.DumpByColumns(matEntries);           // Apply the model view matrix
    glUniformMatrix4fv(modelviewMatLocation, 1, false, matEntries);
    glDrawElements(GL_TRIANGLE_STRIP, 4, GL_UNSIGNED_INT, (void*)0);
    check_for_opengl_errors();


    //Top of cabinet
    matDemo = viewMatrix;
    matDemo.Mult_glTranslate(-4.03, 0.6, 3.95);
    matDemo.Mult_glRotate(1.5708, 1, 0, 0);
    matDemo.Mult_glScale(4.54, 1.05, .05);
    selectShaderProgram(shaderProgramBitmap);
    glBindVertexArray(myVAO[iCube]);                // Select the floor VAO (Vertex Array Object)
    materialUnderTexture.LoadIntoShaders();         // Use the bright underlying color
    matDemo.DumpByColumns(matEntries);           // Apply the model view matrix
    glUniformMatrix4fv(modelviewMatLocation, 1, false, matEntries);
    glUniform1i(applyTextureLocation, true);           // Enable applying the texture!
    glBindTexture(GL_TEXTURE_2D, TextureNames[17]);
    glDrawElements(GL_TRIANGLE_STRIP, 10, GL_UNSIGNED_INT, (void*)0);
    check_for_opengl_errors();


    matDemo.Mult_glTranslate(0, 1, -1.0f);
    selectShaderProgram(shaderProgramBitmap);
    glBindVertexArray(myVAO[iCubeTop]);                // Select the floor VAO (Vertex Array Object)
    materialUnderTexture.LoadIntoShaders();         // Use the bright underlying color
    matDemo.DumpByColumns(matEntries);           // Apply the model view matrix
    glUniformMatrix4fv(modelviewMatLocation, 1, false, matEntries);
    glDrawElements(GL_TRIANGLE_STRIP, 4, GL_UNSIGNED_INT, (void*)0);
    check_for_opengl_errors();

    matDemo.Mult_glTranslate(0, -1, 0);
    matDemo.Mult_glRotate(3.14159, 0, 0, 1);
    matDemo.Mult_glTranslate(-1, 0, 0);
    selectShaderProgram(shaderProgramBitmap);
    glBindVertexArray(myVAO[iCubeTop]);                // Select the floor VAO (Vertex Array Object)
    materialUnderTexture.LoadIntoShaders();         // Use the bright underlying color
    matDemo.DumpByColumns(matEntries);           // Apply the model view matrix
    glUniformMatrix4fv(modelviewMatLocation, 1, false, matEntries);
    glDrawElements(GL_TRIANGLE_STRIP, 4, GL_UNSIGNED_INT, (void*)0);
    check_for_opengl_errors();

    matDemo = viewMatrix;
    matDemo.Mult_glTranslate(0.50, 0.6, 5);
    matDemo.Mult_glScale(.05, .42, 1.05);
    selectShaderProgram(shaderProgramBitmap);
    glBindVertexArray(myVAO[iCube]);                // Select the floor VAO (Vertex Array Object)
    materialUnderTexture.LoadIntoShaders();         // Use the bright underlying color
    matDemo.DumpByColumns(matEntries);           // Apply the model view matrix
    glUniformMatrix4fv(modelviewMatLocation, 1, false, matEntries);
    glUniform1i(applyTextureLocation, true);           // Enable applying the texture!
    glBindTexture(GL_TEXTURE_2D, TextureNames[17]);
    glDrawElements(GL_TRIANGLE_STRIP, 10, GL_UNSIGNED_INT, (void*)0);
    check_for_opengl_errors();


    matDemo.Mult_glTranslate(0, 1, -1.0f);
    selectShaderProgram(shaderProgramBitmap);
    glBindVertexArray(myVAO[iCubeTop]);                // Select the floor VAO (Vertex Array Object)
    materialUnderTexture.LoadIntoShaders();         // Use the bright underlying color
    matDemo.DumpByColumns(matEntries);           // Apply the model view matrix
    glUniformMatrix4fv(modelviewMatLocation, 1, false, matEntries);
    glDrawElements(GL_TRIANGLE_STRIP, 4, GL_UNSIGNED_INT, (void*)0);
    check_for_opengl_errors();

    matDemo.Mult_glTranslate(0, -1, 0);
    matDemo.Mult_glRotate(3.14159, 0, 0, 1);
    matDemo.Mult_glTranslate(-1, 0, 0);
    selectShaderProgram(shaderProgramBitmap);
    glBindVertexArray(myVAO[iCubeTop]);                // Select the floor VAO (Vertex Array Object)
    materialUnderTexture.LoadIntoShaders();         // Use the bright underlying color
    matDemo.DumpByColumns(matEntries);           // Apply the model view matrix
    glUniformMatrix4fv(modelviewMatLocation, 1, false, matEntries);
    glDrawElements(GL_TRIANGLE_STRIP, 4, GL_UNSIGNED_INT, (void*)0);
    check_for_opengl_errors();

    matDemo = viewMatrix;
    matDemo.Mult_glTranslate(0.5, 1.02, 3.95);
    matDemo.Mult_glRotate(1.5708, 1, 0, 0);
    matDemo.Mult_glScale(3.10, 1.05, .05);
    selectShaderProgram(shaderProgramBitmap);
    glBindVertexArray(myVAO[iCube]);                // Select the floor VAO (Vertex Array Object)
    materialUnderTexture.LoadIntoShaders();         // Use the bright underlying color
    matDemo.DumpByColumns(matEntries);           // Apply the model view matrix
    glUniformMatrix4fv(modelviewMatLocation, 1, false, matEntries);
    glUniform1i(applyTextureLocation, true);           // Enable applying the texture!
    glBindTexture(GL_TEXTURE_2D, TextureNames[17]);
    glDrawElements(GL_TRIANGLE_STRIP, 10, GL_UNSIGNED_INT, (void*)0);
    check_for_opengl_errors();


    matDemo.Mult_glTranslate(0, 1, -1.0f);
    selectShaderProgram(shaderProgramBitmap);
    glBindVertexArray(myVAO[iCubeTop]);                // Select the floor VAO (Vertex Array Object)
    materialUnderTexture.LoadIntoShaders();         // Use the bright underlying color
    matDemo.DumpByColumns(matEntries);           // Apply the model view matrix
    glUniformMatrix4fv(modelviewMatLocation, 1, false, matEntries);
    glDrawElements(GL_TRIANGLE_STRIP, 4, GL_UNSIGNED_INT, (void*)0);
    check_for_opengl_errors();

    matDemo.Mult_glTranslate(0, -1, 0);
    matDemo.Mult_glRotate(3.14159, 0, 0, 1);
    matDemo.Mult_glTranslate(-1, 0, 0);
    selectShaderProgram(shaderProgramBitmap);
    glBindVertexArray(myVAO[iCubeTop]);                // Select the floor VAO (Vertex Array Object)
    materialUnderTexture.LoadIntoShaders();         // Use the bright underlying color
    matDemo.DumpByColumns(matEntries);           // Apply the model view matrix
    glUniformMatrix4fv(modelviewMatLocation, 1, false, matEntries);
    glDrawElements(GL_TRIANGLE_STRIP, 4, GL_UNSIGNED_INT, (void*)0);
    check_for_opengl_errors();

    // Render Painting
    // Render Painting 1
    matDemo = viewMatrix;
    matDemo.Mult_glTranslate(-5, 4.4, 4.3);
    matDemo.Mult_glRotate(1.5708, 0, 0, -1);
    matDemo.Mult_glRotate(1.5708, 0, 1, 0);
    matDemo.Mult_glScale(2.5,2.5,1.5);
    selectShaderProgram(shaderProgramBitmap);
    glBindVertexArray(myVAO[iCubeTop]);                // Select the floor VAO (Vertex Array Object)
    materialUnderTexture.LoadIntoShaders();         // Use the bright underlying color
    matDemo.DumpByColumns(matEntries);           // Apply the model view matrix
    glUniformMatrix4fv(modelviewMatLocation, 1, false, matEntries);
    glUniform1i(applyTextureLocation, true);
    glPolygonOffset(-1.0, -1.0);
    glBindTexture(GL_TEXTURE_2D, TextureNames[16]);
    glDrawElements(GL_TRIANGLE_STRIP, 4, GL_UNSIGNED_INT, (void*)0);
    check_for_opengl_errors();
    glUniform1i(applyTextureLocation, false); 

    matDemo.Mult_glTranslate(1.2, 0, 0);
    selectShaderProgram(shaderProgramBitmap);
    glBindVertexArray(myVAO[iCubeTop]);                // Select the floor VAO (Vertex Array Object)
    materialUnderTexture.LoadIntoShaders();         // Use the bright underlying color
    matDemo.DumpByColumns(matEntries);           // Apply the model view matrix
    glUniformMatrix4fv(modelviewMatLocation, 1, false, matEntries);
    glUniform1i(applyTextureLocation, true);
    glPolygonOffset(-1.0, -1.0);
    glBindTexture(GL_TEXTURE_2D, TextureNames[21]);
    glDrawElements(GL_TRIANGLE_STRIP, 4, GL_UNSIGNED_INT, (void*)0);
    check_for_opengl_errors();
    glUniform1i(applyTextureLocation, false);

    matDemo.Mult_glTranslate(1.2, 0, 0);
    selectShaderProgram(shaderProgramBitmap);
    glBindVertexArray(myVAO[iCubeTop]);                // Select the floor VAO (Vertex Array Object)
    materialUnderTexture.LoadIntoShaders();         // Use the bright underlying color
    matDemo.DumpByColumns(matEntries);           // Apply the model view matrix
    glUniformMatrix4fv(modelviewMatLocation, 1, false, matEntries);
    glUniform1i(applyTextureLocation, true);
    glPolygonOffset(-1.0, -1.0);
    glBindTexture(GL_TEXTURE_2D, TextureNames[22]);
    glDrawElements(GL_TRIANGLE_STRIP, 4, GL_UNSIGNED_INT, (void*)0);
    check_for_opengl_errors();
    glUniform1i(applyTextureLocation, false);

    matDemo = viewMatrix;
    matDemo.Mult_glTranslate(5, 4.9, 1.2);
    matDemo.Mult_glRotate(-1.5708, 0, 0, -1);
    matDemo.Mult_glRotate(-1.5708, 0, 1, 0);
    matDemo.Mult_glScale(3.6, 2.5, 3);
    selectShaderProgram(shaderProgramBitmap);
    glBindVertexArray(myVAO[iCubeTop]);                // Select the floor VAO (Vertex Array Object)
    materialUnderTexture.LoadIntoShaders();         // Use the bright underlying color
    matDemo.DumpByColumns(matEntries);           // Apply the model view matrix
    glUniformMatrix4fv(modelviewMatLocation, 1, false, matEntries);
    glUniform1i(applyTextureLocation, true);
    glPolygonOffset(-1.0, -1.0);
    glBindTexture(GL_TEXTURE_2D, TextureNames[15]);
    glDrawElements(GL_TRIANGLE_STRIP, 4, GL_UNSIGNED_INT, (void*)0);
    check_for_opengl_errors();
    glUniform1i(applyTextureLocation, false);


    matDemo = viewMatrix;
    matDemo.Mult_glTranslate(-1.8, 1, -3);
    matDemo.Mult_glScale(.15, .15, .15);
    matDemo.DumpByColumns(matEntries);           // Apply the model view matrix
    glUniformMatrix4fv(modelviewMatLocation, 1, false, matEntries);
    glUniform1i(applyTextureLocation, true);
    glBindTexture(GL_TEXTURE_2D, TextureNames[12]);
    texTeapot.Render();



    // *************
    // Render two spheres and a cylinder
    // YOU MUST MODIFY THE CODE BELOW, AND ADD TEXTURES TO THE SPHERE AND THE CAPS OF THE CYLINDER.

    /**
    // Render a sphere with a earth image texture map
    //  YOU DO NOT NEED TO MODIFY THIS SPHERE OR ITS TEXTURE MAP
    LinearMapR4 matDemo = viewMatrix;
    matDemo.Mult_glTranslate(-3.5, 1.1, 0.4);
    matDemo.DumpByColumns(matEntries);           // Apply the model view matrix
    glUniformMatrix4fv(modelviewMatLocation, 1, false, matEntries);
    glBindTexture(GL_TEXTURE_2D, TextureNames[0]);     // Choose Earth image texture
    glUniform1i(applyTextureLocation, true);           // Enable applying the texture!
    texSphere.Render();                                 // Render the sphere
    glUniform1i(applyTextureLocation, false);           // Turn off applying texture!
  

    // Render a sphere with a texture map 
    // ADD A TEXTURE MAP TO THIS SPHERE - SIMILAR TO THE CODE ABOVE
    matDemo = viewMatrix;
    matDemo.Mult_glTranslate( 3.5, 1.1, 0.4);
    matDemo.DumpByColumns(matEntries);           // Apply the model view matrix
    glUniformMatrix4fv(modelviewMatLocation, 1, false, matEntries);
    glBindTexture(GL_TEXTURE_2D, TextureNames[0]);     // Choose Earth image texture
    glUniform1i(applyTextureLocation, true);           // Enable applying the texture!
    texSphere.Render();                                 // Render the sphere
    glUniform1i(applyTextureLocation, false);           // Turn off applying texture!


    // Render a cylinder 
    // YOU MAY LEAVE THE TEXTURE MAP ON THE SIDE OF THE CYLINDER
    // YOU MUST ADD TEXTURE MAPS TO THE TOP AND BOTTOM FACES OF THE CYLINDER
    // NOTE THERE ARE SEPARATE RENDER COMMANDS FOR THE THREE PARTS OF THE CYLINDER.
    // YOU WILL ALSO CHANGE THE ORIENTATION OF THE CYLINDER
    matDemo = viewMatrix;
    matDemo.Mult_glTranslate(0.0, 1.1, 1.0);
    matDemo.Mult_glRotate(1.5708,0.0,0.0,-1.0);
    matDemo.DumpByColumns(matEntries);           // Apply the model view matrix
    glUniformMatrix4fv(modelviewMatLocation, 1, false, matEntries);
    glBindTexture(GL_TEXTURE_2D, TextureNames[0]);     // Choose texture
    glUniform1i(applyTextureLocation, true);           // Enable applying the texture!
    texCylinder.RenderSide();                             // Render the sphere side
    glBindTexture(GL_TEXTURE_2D, TextureNames[0]);     // Choose texture
    glUniform1i(applyTextureLocation, true);             // Enable applying the texture!
    texCylinder.RenderTop();                              // RENDER THIS WITH A TEXTURE MAP
    glBindTexture(GL_TEXTURE_2D, TextureNames[0]);
    texCylinder.RenderBase();                             // RENDER THIS WITH A TEXTURE MAP
    glUniform1i(applyTextureLocation, false);             // Turn off applying texture!

    // Renders a textured torus in the back left corner.
    // matDemo = viewMatrix;
    // matDemo.Mult_glTranslate(-4.0, 0.3, -3.0);
    // matDemo.Mult_glScale(0.8, 0.2, 0.8);
    // matDemo.DumpByColumns(matEntries);           // Apply the model view matrix
    // glUniformMatrix4fv(modelviewMatLocation, 1, false, matEntries);
    // glBindTexture(GL_TEXTURE_2D, TextureNames[2]);     // Choose texture
    // glUniform1i(applyTextureLocation, true);            // Enable applying the texture!
    // texTorus.Render();                                  // Render the torus
    // glUniform1i(applyTextureLocation, false);           // Turn off applying texture!
        
    check_for_opengl_errors();      // Watch the console window for error messages!
      **/
}

void SamsRenderCircularSurf()
{
    float matEntries[16];       // Temporary storage for floats

    glBindVertexArray(myVAO[iCircularSurf]);

    // Calculate the model view matrix for the circular surface
    LinearMapR4 matDemo = viewMatrix;
    matDemo.Mult_glTranslate(0.0, 0.8, -2.5);     // Center in the back & raise up
    matDemo.Mult_glScale(0.18, 0.4, 0.18);         // Adjust the circular diameter and height

                                                 // Set the uniform values (they are not stored with the VAO and thus must be set again everytime
    materialUnderTexture.LoadIntoShaders();                       // Use the bright underlying material
    matDemo.DumpByColumns(matEntries);
    glUniformMatrix4fv(modelviewMatLocation, 1, false, matEntries); // Select the modelview matrix to place it
    glBindTexture(GL_TEXTURE_2D, TextureNames[0]);     // Choose Mandala texture
    // ONCE YOU HAVE TEXTURE COORDINATES FOR THE CIRCULAR SURFACE, PUT THE NEXT LINE BACK IN.
    glUniform1i(applyTextureLocation, true);           // Enable applying the texture!
                                                                   // Draw the the triangle strips
    for (int i = 0; i < meshRes; i++) {
        glDrawElements(GL_TRIANGLE_STRIP, 1 + 2 * meshRes, GL_UNSIGNED_INT,
            (void*)(i * (1 + 2 * meshRes) * sizeof(unsigned int)));
    }
    glUniform1i(applyTextureLocation, false);           // Disable applying the texture!
}


// *******
// ADD TEXTURE COORDINATES TO EITHER YOUR OWN "MyRemeshCircularSurf" or
// TO THE PROVIDED "SamsRemeshCircularSurf"
// IF YOU USE YOUR OWN, ALSO REPLACE "SamsRenderCircularMesh" WITH YOUR
// OWN "MyRenderCircularMesh" IF NEEDED.
// TASKS FOR ADDING TEXTURE COORDINATES:
//    a. Change stride to 8*sizeof(float) instead 6*sizeof(float).
//    b. Be sure to allocate enough memory for circularVerts[].
//    c. Calculate the (s,t) texture coordinates, put them in the array.
//    d. Update the calls to glVertexAttribPointer and glEnableVertexAttribArray
//         in the routine MySetupSurfaces above.  
//       And, add new calls for the texture coordinates.


void SamsRemeshCircularSurf()
{
    // Circular surface vertices.
    int numCircularVerts = 1 + meshRes * meshRes;
    float* circularVerts = new float[8 * numCircularVerts];
    // Circular surface elements (indices to vertices in a triangle strip)
    int numCircularElts = meshRes * (1 + 2 * meshRes);
    unsigned int* circularElements = new unsigned int[numCircularElts];

    float* toPtr = circularVerts;
    *(toPtr++) = 0.0f;      // Center point
    *(toPtr++) = 1.0f;
    *(toPtr++) = 0.0f;
    *(toPtr++) = 0.0f;      // Center normal
    *(toPtr++) = 1.0f;
    *(toPtr++) = 0.0f;
    *(toPtr++) = 0.5f;      // Center of texture
    *(toPtr++) = 0.5f;
    for (int i = 0; i < meshRes; i++) {
        float theta = (float)PI2 * ((float)i) / (float)meshRes;
        float c = cosf(theta);
        float s = sinf(theta);
        float partialC = -s;
        float partialS = c;
        VectorR3 partialTheta(partialC, 0.0, partialS);
        for (int j = 1; j <= meshRes; j++) {
            float r = 2.9f * (float)PI * ((float)j) / (float)meshRes;
            float dis = ((float)j) / (float)meshRes;
            float x = r;
            float dampingFactor = 0.08f;
            float fff = (float)(1.0 + dampingFactor * r * r);
            float y = j==0 ? 1.0f : fff*sin(r)/r;
            float xprime = 1.0;
            float yprime = (x * cosf(x) + sinf(x)) / (x + 1.0f) - x * sinf(x) / ((x + 1.0f) * (x + 1.0f));
            VectorR3 partialR((double)(c * xprime), yprime, (double)(s * xprime));
            *(toPtr++) = c * x;                 // (i,j) point
            *(toPtr++) = y;
            *(toPtr++) = s * x;
            VectorR3 normal = -partialR * partialTheta;
            normal.Normalize();
            *(toPtr++) = (float)normal.x;      // (i,j) normal
            *(toPtr++) = (float)normal.y;
            *(toPtr++) = (float)normal.z;

            *(toPtr++) = c * dis/3.4 + 0.5;
            *(toPtr++) = s * dis/3.4 + 0.5;
       }
    }

    unsigned int* toElt = circularElements;
    for (int i = 0; i < meshRes; i++) {
        *(toElt++) = 0;         // Central vertex
        for (int j = 0; j < meshRes; j++) {
            *(toElt++) = ((i + 1) % meshRes) * meshRes + j + 1;
            *(toElt++) = i * meshRes + j + 1;
        }
    }

    glBindVertexArray(myVAO[iCircularSurf]);
    glBindBuffer(GL_ARRAY_BUFFER, myVBO[iCircularSurf]);
    glBufferData(GL_ARRAY_BUFFER, 8 * numCircularVerts * sizeof(float), circularVerts, GL_STATIC_DRAW);
    glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, myEBO[iCircularSurf]);
    glBufferData(GL_ELEMENT_ARRAY_BUFFER, numCircularElts * sizeof(unsigned int), circularElements, GL_STATIC_DRAW);

    delete[] circularVerts;
    delete[] circularElements;
}

